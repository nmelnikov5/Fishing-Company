
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Boat
 * 
 */
export type Boat = $Result.DefaultSelection<Prisma.$BoatPayload>
/**
 * Model CrewMember
 * 
 */
export type CrewMember = $Result.DefaultSelection<Prisma.$CrewMemberPayload>
/**
 * Model FishingTrip
 * 
 */
export type FishingTrip = $Result.DefaultSelection<Prisma.$FishingTripPayload>
/**
 * Model FishingBank
 * 
 */
export type FishingBank = $Result.DefaultSelection<Prisma.$FishingBankPayload>
/**
 * Model BankVisit
 * 
 */
export type BankVisit = $Result.DefaultSelection<Prisma.$BankVisitPayload>
/**
 * Model FishType
 * 
 */
export type FishType = $Result.DefaultSelection<Prisma.$FishTypePayload>
/**
 * Model FishCatch
 * 
 */
export type FishCatch = $Result.DefaultSelection<Prisma.$FishCatchPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Boats
 * const boats = await prisma.boat.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Boats
   * const boats = await prisma.boat.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.boat`: Exposes CRUD operations for the **Boat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boats
    * const boats = await prisma.boat.findMany()
    * ```
    */
  get boat(): Prisma.BoatDelegate<ExtArgs>;

  /**
   * `prisma.crewMember`: Exposes CRUD operations for the **CrewMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CrewMembers
    * const crewMembers = await prisma.crewMember.findMany()
    * ```
    */
  get crewMember(): Prisma.CrewMemberDelegate<ExtArgs>;

  /**
   * `prisma.fishingTrip`: Exposes CRUD operations for the **FishingTrip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FishingTrips
    * const fishingTrips = await prisma.fishingTrip.findMany()
    * ```
    */
  get fishingTrip(): Prisma.FishingTripDelegate<ExtArgs>;

  /**
   * `prisma.fishingBank`: Exposes CRUD operations for the **FishingBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FishingBanks
    * const fishingBanks = await prisma.fishingBank.findMany()
    * ```
    */
  get fishingBank(): Prisma.FishingBankDelegate<ExtArgs>;

  /**
   * `prisma.bankVisit`: Exposes CRUD operations for the **BankVisit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BankVisits
    * const bankVisits = await prisma.bankVisit.findMany()
    * ```
    */
  get bankVisit(): Prisma.BankVisitDelegate<ExtArgs>;

  /**
   * `prisma.fishType`: Exposes CRUD operations for the **FishType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FishTypes
    * const fishTypes = await prisma.fishType.findMany()
    * ```
    */
  get fishType(): Prisma.FishTypeDelegate<ExtArgs>;

  /**
   * `prisma.fishCatch`: Exposes CRUD operations for the **FishCatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FishCatches
    * const fishCatches = await prisma.fishCatch.findMany()
    * ```
    */
  get fishCatch(): Prisma.FishCatchDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Boat: 'Boat',
    CrewMember: 'CrewMember',
    FishingTrip: 'FishingTrip',
    FishingBank: 'FishingBank',
    BankVisit: 'BankVisit',
    FishType: 'FishType',
    FishCatch: 'FishCatch'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "boat" | "crewMember" | "fishingTrip" | "fishingBank" | "bankVisit" | "fishType" | "fishCatch"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Boat: {
        payload: Prisma.$BoatPayload<ExtArgs>
        fields: Prisma.BoatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>
          }
          findFirst: {
            args: Prisma.BoatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>
          }
          findMany: {
            args: Prisma.BoatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>[]
          }
          create: {
            args: Prisma.BoatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>
          }
          createMany: {
            args: Prisma.BoatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>[]
          }
          delete: {
            args: Prisma.BoatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>
          }
          update: {
            args: Prisma.BoatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>
          }
          deleteMany: {
            args: Prisma.BoatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BoatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoatPayload>
          }
          aggregate: {
            args: Prisma.BoatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoat>
          }
          groupBy: {
            args: Prisma.BoatGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoatGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoatCountArgs<ExtArgs>
            result: $Utils.Optional<BoatCountAggregateOutputType> | number
          }
        }
      }
      CrewMember: {
        payload: Prisma.$CrewMemberPayload<ExtArgs>
        fields: Prisma.CrewMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CrewMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CrewMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>
          }
          findFirst: {
            args: Prisma.CrewMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CrewMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>
          }
          findMany: {
            args: Prisma.CrewMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>[]
          }
          create: {
            args: Prisma.CrewMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>
          }
          createMany: {
            args: Prisma.CrewMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CrewMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>[]
          }
          delete: {
            args: Prisma.CrewMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>
          }
          update: {
            args: Prisma.CrewMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>
          }
          deleteMany: {
            args: Prisma.CrewMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CrewMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CrewMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrewMemberPayload>
          }
          aggregate: {
            args: Prisma.CrewMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCrewMember>
          }
          groupBy: {
            args: Prisma.CrewMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<CrewMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.CrewMemberCountArgs<ExtArgs>
            result: $Utils.Optional<CrewMemberCountAggregateOutputType> | number
          }
        }
      }
      FishingTrip: {
        payload: Prisma.$FishingTripPayload<ExtArgs>
        fields: Prisma.FishingTripFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FishingTripFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FishingTripFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>
          }
          findFirst: {
            args: Prisma.FishingTripFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FishingTripFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>
          }
          findMany: {
            args: Prisma.FishingTripFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>[]
          }
          create: {
            args: Prisma.FishingTripCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>
          }
          createMany: {
            args: Prisma.FishingTripCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FishingTripCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>[]
          }
          delete: {
            args: Prisma.FishingTripDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>
          }
          update: {
            args: Prisma.FishingTripUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>
          }
          deleteMany: {
            args: Prisma.FishingTripDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FishingTripUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FishingTripUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingTripPayload>
          }
          aggregate: {
            args: Prisma.FishingTripAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFishingTrip>
          }
          groupBy: {
            args: Prisma.FishingTripGroupByArgs<ExtArgs>
            result: $Utils.Optional<FishingTripGroupByOutputType>[]
          }
          count: {
            args: Prisma.FishingTripCountArgs<ExtArgs>
            result: $Utils.Optional<FishingTripCountAggregateOutputType> | number
          }
        }
      }
      FishingBank: {
        payload: Prisma.$FishingBankPayload<ExtArgs>
        fields: Prisma.FishingBankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FishingBankFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FishingBankFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>
          }
          findFirst: {
            args: Prisma.FishingBankFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FishingBankFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>
          }
          findMany: {
            args: Prisma.FishingBankFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>[]
          }
          create: {
            args: Prisma.FishingBankCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>
          }
          createMany: {
            args: Prisma.FishingBankCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FishingBankCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>[]
          }
          delete: {
            args: Prisma.FishingBankDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>
          }
          update: {
            args: Prisma.FishingBankUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>
          }
          deleteMany: {
            args: Prisma.FishingBankDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FishingBankUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FishingBankUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishingBankPayload>
          }
          aggregate: {
            args: Prisma.FishingBankAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFishingBank>
          }
          groupBy: {
            args: Prisma.FishingBankGroupByArgs<ExtArgs>
            result: $Utils.Optional<FishingBankGroupByOutputType>[]
          }
          count: {
            args: Prisma.FishingBankCountArgs<ExtArgs>
            result: $Utils.Optional<FishingBankCountAggregateOutputType> | number
          }
        }
      }
      BankVisit: {
        payload: Prisma.$BankVisitPayload<ExtArgs>
        fields: Prisma.BankVisitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankVisitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankVisitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>
          }
          findFirst: {
            args: Prisma.BankVisitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankVisitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>
          }
          findMany: {
            args: Prisma.BankVisitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>[]
          }
          create: {
            args: Prisma.BankVisitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>
          }
          createMany: {
            args: Prisma.BankVisitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BankVisitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>[]
          }
          delete: {
            args: Prisma.BankVisitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>
          }
          update: {
            args: Prisma.BankVisitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>
          }
          deleteMany: {
            args: Prisma.BankVisitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BankVisitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BankVisitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankVisitPayload>
          }
          aggregate: {
            args: Prisma.BankVisitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBankVisit>
          }
          groupBy: {
            args: Prisma.BankVisitGroupByArgs<ExtArgs>
            result: $Utils.Optional<BankVisitGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankVisitCountArgs<ExtArgs>
            result: $Utils.Optional<BankVisitCountAggregateOutputType> | number
          }
        }
      }
      FishType: {
        payload: Prisma.$FishTypePayload<ExtArgs>
        fields: Prisma.FishTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FishTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FishTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>
          }
          findFirst: {
            args: Prisma.FishTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FishTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>
          }
          findMany: {
            args: Prisma.FishTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>[]
          }
          create: {
            args: Prisma.FishTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>
          }
          createMany: {
            args: Prisma.FishTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FishTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>[]
          }
          delete: {
            args: Prisma.FishTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>
          }
          update: {
            args: Prisma.FishTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>
          }
          deleteMany: {
            args: Prisma.FishTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FishTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FishTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishTypePayload>
          }
          aggregate: {
            args: Prisma.FishTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFishType>
          }
          groupBy: {
            args: Prisma.FishTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FishTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FishTypeCountArgs<ExtArgs>
            result: $Utils.Optional<FishTypeCountAggregateOutputType> | number
          }
        }
      }
      FishCatch: {
        payload: Prisma.$FishCatchPayload<ExtArgs>
        fields: Prisma.FishCatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FishCatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FishCatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>
          }
          findFirst: {
            args: Prisma.FishCatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FishCatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>
          }
          findMany: {
            args: Prisma.FishCatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>[]
          }
          create: {
            args: Prisma.FishCatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>
          }
          createMany: {
            args: Prisma.FishCatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FishCatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>[]
          }
          delete: {
            args: Prisma.FishCatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>
          }
          update: {
            args: Prisma.FishCatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>
          }
          deleteMany: {
            args: Prisma.FishCatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FishCatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FishCatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FishCatchPayload>
          }
          aggregate: {
            args: Prisma.FishCatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFishCatch>
          }
          groupBy: {
            args: Prisma.FishCatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<FishCatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.FishCatchCountArgs<ExtArgs>
            result: $Utils.Optional<FishCatchCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BoatCountOutputType
   */

  export type BoatCountOutputType = {
    fishingTrips: number
  }

  export type BoatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishingTrips?: boolean | BoatCountOutputTypeCountFishingTripsArgs
  }

  // Custom InputTypes
  /**
   * BoatCountOutputType without action
   */
  export type BoatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoatCountOutputType
     */
    select?: BoatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BoatCountOutputType without action
   */
  export type BoatCountOutputTypeCountFishingTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishingTripWhereInput
  }


  /**
   * Count Type CrewMemberCountOutputType
   */

  export type CrewMemberCountOutputType = {
    fishingTrips: number
  }

  export type CrewMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishingTrips?: boolean | CrewMemberCountOutputTypeCountFishingTripsArgs
  }

  // Custom InputTypes
  /**
   * CrewMemberCountOutputType without action
   */
  export type CrewMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMemberCountOutputType
     */
    select?: CrewMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CrewMemberCountOutputType without action
   */
  export type CrewMemberCountOutputTypeCountFishingTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishingTripWhereInput
  }


  /**
   * Count Type FishingTripCountOutputType
   */

  export type FishingTripCountOutputType = {
    crewMembers: number
    bankVisits: number
  }

  export type FishingTripCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    crewMembers?: boolean | FishingTripCountOutputTypeCountCrewMembersArgs
    bankVisits?: boolean | FishingTripCountOutputTypeCountBankVisitsArgs
  }

  // Custom InputTypes
  /**
   * FishingTripCountOutputType without action
   */
  export type FishingTripCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTripCountOutputType
     */
    select?: FishingTripCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FishingTripCountOutputType without action
   */
  export type FishingTripCountOutputTypeCountCrewMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CrewMemberWhereInput
  }

  /**
   * FishingTripCountOutputType without action
   */
  export type FishingTripCountOutputTypeCountBankVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankVisitWhereInput
  }


  /**
   * Count Type FishingBankCountOutputType
   */

  export type FishingBankCountOutputType = {
    bankVisits: number
  }

  export type FishingBankCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankVisits?: boolean | FishingBankCountOutputTypeCountBankVisitsArgs
  }

  // Custom InputTypes
  /**
   * FishingBankCountOutputType without action
   */
  export type FishingBankCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBankCountOutputType
     */
    select?: FishingBankCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FishingBankCountOutputType without action
   */
  export type FishingBankCountOutputTypeCountBankVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankVisitWhereInput
  }


  /**
   * Count Type BankVisitCountOutputType
   */

  export type BankVisitCountOutputType = {
    fishCatches: number
  }

  export type BankVisitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishCatches?: boolean | BankVisitCountOutputTypeCountFishCatchesArgs
  }

  // Custom InputTypes
  /**
   * BankVisitCountOutputType without action
   */
  export type BankVisitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisitCountOutputType
     */
    select?: BankVisitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BankVisitCountOutputType without action
   */
  export type BankVisitCountOutputTypeCountFishCatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishCatchWhereInput
  }


  /**
   * Count Type FishTypeCountOutputType
   */

  export type FishTypeCountOutputType = {
    fishCatches: number
  }

  export type FishTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishCatches?: boolean | FishTypeCountOutputTypeCountFishCatchesArgs
  }

  // Custom InputTypes
  /**
   * FishTypeCountOutputType without action
   */
  export type FishTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishTypeCountOutputType
     */
    select?: FishTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FishTypeCountOutputType without action
   */
  export type FishTypeCountOutputTypeCountFishCatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishCatchWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Boat
   */

  export type AggregateBoat = {
    _count: BoatCountAggregateOutputType | null
    _avg: BoatAvgAggregateOutputType | null
    _sum: BoatSumAggregateOutputType | null
    _min: BoatMinAggregateOutputType | null
    _max: BoatMaxAggregateOutputType | null
  }

  export type BoatAvgAggregateOutputType = {
    id: number | null
    displacement: number | null
  }

  export type BoatSumAggregateOutputType = {
    id: number | null
    displacement: number | null
  }

  export type BoatMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    displacement: number | null
    buildDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoatMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    displacement: number | null
    buildDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoatCountAggregateOutputType = {
    id: number
    name: number
    type: number
    displacement: number
    buildDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BoatAvgAggregateInputType = {
    id?: true
    displacement?: true
  }

  export type BoatSumAggregateInputType = {
    id?: true
    displacement?: true
  }

  export type BoatMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    displacement?: true
    buildDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoatMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    displacement?: true
    buildDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoatCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    displacement?: true
    buildDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BoatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boat to aggregate.
     */
    where?: BoatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boats to fetch.
     */
    orderBy?: BoatOrderByWithRelationInput | BoatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boats
    **/
    _count?: true | BoatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoatMaxAggregateInputType
  }

  export type GetBoatAggregateType<T extends BoatAggregateArgs> = {
        [P in keyof T & keyof AggregateBoat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoat[P]>
      : GetScalarType<T[P], AggregateBoat[P]>
  }




  export type BoatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoatWhereInput
    orderBy?: BoatOrderByWithAggregationInput | BoatOrderByWithAggregationInput[]
    by: BoatScalarFieldEnum[] | BoatScalarFieldEnum
    having?: BoatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoatCountAggregateInputType | true
    _avg?: BoatAvgAggregateInputType
    _sum?: BoatSumAggregateInputType
    _min?: BoatMinAggregateInputType
    _max?: BoatMaxAggregateInputType
  }

  export type BoatGroupByOutputType = {
    id: number
    name: string
    type: string
    displacement: number
    buildDate: Date
    createdAt: Date
    updatedAt: Date
    _count: BoatCountAggregateOutputType | null
    _avg: BoatAvgAggregateOutputType | null
    _sum: BoatSumAggregateOutputType | null
    _min: BoatMinAggregateOutputType | null
    _max: BoatMaxAggregateOutputType | null
  }

  type GetBoatGroupByPayload<T extends BoatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoatGroupByOutputType[P]>
            : GetScalarType<T[P], BoatGroupByOutputType[P]>
        }
      >
    >


  export type BoatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    displacement?: boolean
    buildDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fishingTrips?: boolean | Boat$fishingTripsArgs<ExtArgs>
    _count?: boolean | BoatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boat"]>

  export type BoatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    displacement?: boolean
    buildDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["boat"]>

  export type BoatSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    displacement?: boolean
    buildDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BoatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishingTrips?: boolean | Boat$fishingTripsArgs<ExtArgs>
    _count?: boolean | BoatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BoatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BoatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Boat"
    objects: {
      fishingTrips: Prisma.$FishingTripPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      displacement: number
      buildDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["boat"]>
    composites: {}
  }

  type BoatGetPayload<S extends boolean | null | undefined | BoatDefaultArgs> = $Result.GetResult<Prisma.$BoatPayload, S>

  type BoatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoatCountAggregateInputType | true
    }

  export interface BoatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Boat'], meta: { name: 'Boat' } }
    /**
     * Find zero or one Boat that matches the filter.
     * @param {BoatFindUniqueArgs} args - Arguments to find a Boat
     * @example
     * // Get one Boat
     * const boat = await prisma.boat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoatFindUniqueArgs>(args: SelectSubset<T, BoatFindUniqueArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Boat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BoatFindUniqueOrThrowArgs} args - Arguments to find a Boat
     * @example
     * // Get one Boat
     * const boat = await prisma.boat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoatFindUniqueOrThrowArgs>(args: SelectSubset<T, BoatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Boat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoatFindFirstArgs} args - Arguments to find a Boat
     * @example
     * // Get one Boat
     * const boat = await prisma.boat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoatFindFirstArgs>(args?: SelectSubset<T, BoatFindFirstArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Boat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoatFindFirstOrThrowArgs} args - Arguments to find a Boat
     * @example
     * // Get one Boat
     * const boat = await prisma.boat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoatFindFirstOrThrowArgs>(args?: SelectSubset<T, BoatFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Boats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boats
     * const boats = await prisma.boat.findMany()
     * 
     * // Get first 10 Boats
     * const boats = await prisma.boat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boatWithIdOnly = await prisma.boat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoatFindManyArgs>(args?: SelectSubset<T, BoatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Boat.
     * @param {BoatCreateArgs} args - Arguments to create a Boat.
     * @example
     * // Create one Boat
     * const Boat = await prisma.boat.create({
     *   data: {
     *     // ... data to create a Boat
     *   }
     * })
     * 
     */
    create<T extends BoatCreateArgs>(args: SelectSubset<T, BoatCreateArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Boats.
     * @param {BoatCreateManyArgs} args - Arguments to create many Boats.
     * @example
     * // Create many Boats
     * const boat = await prisma.boat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoatCreateManyArgs>(args?: SelectSubset<T, BoatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Boats and returns the data saved in the database.
     * @param {BoatCreateManyAndReturnArgs} args - Arguments to create many Boats.
     * @example
     * // Create many Boats
     * const boat = await prisma.boat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Boats and only return the `id`
     * const boatWithIdOnly = await prisma.boat.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoatCreateManyAndReturnArgs>(args?: SelectSubset<T, BoatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Boat.
     * @param {BoatDeleteArgs} args - Arguments to delete one Boat.
     * @example
     * // Delete one Boat
     * const Boat = await prisma.boat.delete({
     *   where: {
     *     // ... filter to delete one Boat
     *   }
     * })
     * 
     */
    delete<T extends BoatDeleteArgs>(args: SelectSubset<T, BoatDeleteArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Boat.
     * @param {BoatUpdateArgs} args - Arguments to update one Boat.
     * @example
     * // Update one Boat
     * const boat = await prisma.boat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoatUpdateArgs>(args: SelectSubset<T, BoatUpdateArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Boats.
     * @param {BoatDeleteManyArgs} args - Arguments to filter Boats to delete.
     * @example
     * // Delete a few Boats
     * const { count } = await prisma.boat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoatDeleteManyArgs>(args?: SelectSubset<T, BoatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boats
     * const boat = await prisma.boat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoatUpdateManyArgs>(args: SelectSubset<T, BoatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Boat.
     * @param {BoatUpsertArgs} args - Arguments to update or create a Boat.
     * @example
     * // Update or create a Boat
     * const boat = await prisma.boat.upsert({
     *   create: {
     *     // ... data to create a Boat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Boat we want to update
     *   }
     * })
     */
    upsert<T extends BoatUpsertArgs>(args: SelectSubset<T, BoatUpsertArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Boats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoatCountArgs} args - Arguments to filter Boats to count.
     * @example
     * // Count the number of Boats
     * const count = await prisma.boat.count({
     *   where: {
     *     // ... the filter for the Boats we want to count
     *   }
     * })
    **/
    count<T extends BoatCountArgs>(
      args?: Subset<T, BoatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Boat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoatAggregateArgs>(args: Subset<T, BoatAggregateArgs>): Prisma.PrismaPromise<GetBoatAggregateType<T>>

    /**
     * Group by Boat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoatGroupByArgs['orderBy'] }
        : { orderBy?: BoatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Boat model
   */
  readonly fields: BoatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Boat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fishingTrips<T extends Boat$fishingTripsArgs<ExtArgs> = {}>(args?: Subset<T, Boat$fishingTripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Boat model
   */ 
  interface BoatFieldRefs {
    readonly id: FieldRef<"Boat", 'Int'>
    readonly name: FieldRef<"Boat", 'String'>
    readonly type: FieldRef<"Boat", 'String'>
    readonly displacement: FieldRef<"Boat", 'Float'>
    readonly buildDate: FieldRef<"Boat", 'DateTime'>
    readonly createdAt: FieldRef<"Boat", 'DateTime'>
    readonly updatedAt: FieldRef<"Boat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Boat findUnique
   */
  export type BoatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * Filter, which Boat to fetch.
     */
    where: BoatWhereUniqueInput
  }

  /**
   * Boat findUniqueOrThrow
   */
  export type BoatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * Filter, which Boat to fetch.
     */
    where: BoatWhereUniqueInput
  }

  /**
   * Boat findFirst
   */
  export type BoatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * Filter, which Boat to fetch.
     */
    where?: BoatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boats to fetch.
     */
    orderBy?: BoatOrderByWithRelationInput | BoatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boats.
     */
    cursor?: BoatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boats.
     */
    distinct?: BoatScalarFieldEnum | BoatScalarFieldEnum[]
  }

  /**
   * Boat findFirstOrThrow
   */
  export type BoatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * Filter, which Boat to fetch.
     */
    where?: BoatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boats to fetch.
     */
    orderBy?: BoatOrderByWithRelationInput | BoatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boats.
     */
    cursor?: BoatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boats.
     */
    distinct?: BoatScalarFieldEnum | BoatScalarFieldEnum[]
  }

  /**
   * Boat findMany
   */
  export type BoatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * Filter, which Boats to fetch.
     */
    where?: BoatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boats to fetch.
     */
    orderBy?: BoatOrderByWithRelationInput | BoatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boats.
     */
    cursor?: BoatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boats.
     */
    skip?: number
    distinct?: BoatScalarFieldEnum | BoatScalarFieldEnum[]
  }

  /**
   * Boat create
   */
  export type BoatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * The data needed to create a Boat.
     */
    data: XOR<BoatCreateInput, BoatUncheckedCreateInput>
  }

  /**
   * Boat createMany
   */
  export type BoatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boats.
     */
    data: BoatCreateManyInput | BoatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Boat createManyAndReturn
   */
  export type BoatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Boats.
     */
    data: BoatCreateManyInput | BoatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Boat update
   */
  export type BoatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * The data needed to update a Boat.
     */
    data: XOR<BoatUpdateInput, BoatUncheckedUpdateInput>
    /**
     * Choose, which Boat to update.
     */
    where: BoatWhereUniqueInput
  }

  /**
   * Boat updateMany
   */
  export type BoatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boats.
     */
    data: XOR<BoatUpdateManyMutationInput, BoatUncheckedUpdateManyInput>
    /**
     * Filter which Boats to update
     */
    where?: BoatWhereInput
  }

  /**
   * Boat upsert
   */
  export type BoatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * The filter to search for the Boat to update in case it exists.
     */
    where: BoatWhereUniqueInput
    /**
     * In case the Boat found by the `where` argument doesn't exist, create a new Boat with this data.
     */
    create: XOR<BoatCreateInput, BoatUncheckedCreateInput>
    /**
     * In case the Boat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoatUpdateInput, BoatUncheckedUpdateInput>
  }

  /**
   * Boat delete
   */
  export type BoatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
    /**
     * Filter which Boat to delete.
     */
    where: BoatWhereUniqueInput
  }

  /**
   * Boat deleteMany
   */
  export type BoatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boats to delete
     */
    where?: BoatWhereInput
  }

  /**
   * Boat.fishingTrips
   */
  export type Boat$fishingTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    where?: FishingTripWhereInput
    orderBy?: FishingTripOrderByWithRelationInput | FishingTripOrderByWithRelationInput[]
    cursor?: FishingTripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FishingTripScalarFieldEnum | FishingTripScalarFieldEnum[]
  }

  /**
   * Boat without action
   */
  export type BoatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boat
     */
    select?: BoatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoatInclude<ExtArgs> | null
  }


  /**
   * Model CrewMember
   */

  export type AggregateCrewMember = {
    _count: CrewMemberCountAggregateOutputType | null
    _avg: CrewMemberAvgAggregateOutputType | null
    _sum: CrewMemberSumAggregateOutputType | null
    _min: CrewMemberMinAggregateOutputType | null
    _max: CrewMemberMaxAggregateOutputType | null
  }

  export type CrewMemberAvgAggregateOutputType = {
    id: number | null
  }

  export type CrewMemberSumAggregateOutputType = {
    id: number | null
  }

  export type CrewMemberMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CrewMemberMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CrewMemberCountAggregateOutputType = {
    id: number
    name: number
    address: number
    position: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CrewMemberAvgAggregateInputType = {
    id?: true
  }

  export type CrewMemberSumAggregateInputType = {
    id?: true
  }

  export type CrewMemberMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    position?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CrewMemberMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    position?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CrewMemberCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CrewMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrewMember to aggregate.
     */
    where?: CrewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrewMembers to fetch.
     */
    orderBy?: CrewMemberOrderByWithRelationInput | CrewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CrewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrewMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CrewMembers
    **/
    _count?: true | CrewMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CrewMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CrewMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CrewMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CrewMemberMaxAggregateInputType
  }

  export type GetCrewMemberAggregateType<T extends CrewMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateCrewMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCrewMember[P]>
      : GetScalarType<T[P], AggregateCrewMember[P]>
  }




  export type CrewMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CrewMemberWhereInput
    orderBy?: CrewMemberOrderByWithAggregationInput | CrewMemberOrderByWithAggregationInput[]
    by: CrewMemberScalarFieldEnum[] | CrewMemberScalarFieldEnum
    having?: CrewMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CrewMemberCountAggregateInputType | true
    _avg?: CrewMemberAvgAggregateInputType
    _sum?: CrewMemberSumAggregateInputType
    _min?: CrewMemberMinAggregateInputType
    _max?: CrewMemberMaxAggregateInputType
  }

  export type CrewMemberGroupByOutputType = {
    id: number
    name: string
    address: string
    position: string
    createdAt: Date
    updatedAt: Date
    _count: CrewMemberCountAggregateOutputType | null
    _avg: CrewMemberAvgAggregateOutputType | null
    _sum: CrewMemberSumAggregateOutputType | null
    _min: CrewMemberMinAggregateOutputType | null
    _max: CrewMemberMaxAggregateOutputType | null
  }

  type GetCrewMemberGroupByPayload<T extends CrewMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CrewMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CrewMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CrewMemberGroupByOutputType[P]>
            : GetScalarType<T[P], CrewMemberGroupByOutputType[P]>
        }
      >
    >


  export type CrewMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fishingTrips?: boolean | CrewMember$fishingTripsArgs<ExtArgs>
    _count?: boolean | CrewMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["crewMember"]>

  export type CrewMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["crewMember"]>

  export type CrewMemberSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CrewMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishingTrips?: boolean | CrewMember$fishingTripsArgs<ExtArgs>
    _count?: boolean | CrewMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CrewMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CrewMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CrewMember"
    objects: {
      fishingTrips: Prisma.$FishingTripPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      position: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["crewMember"]>
    composites: {}
  }

  type CrewMemberGetPayload<S extends boolean | null | undefined | CrewMemberDefaultArgs> = $Result.GetResult<Prisma.$CrewMemberPayload, S>

  type CrewMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CrewMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CrewMemberCountAggregateInputType | true
    }

  export interface CrewMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CrewMember'], meta: { name: 'CrewMember' } }
    /**
     * Find zero or one CrewMember that matches the filter.
     * @param {CrewMemberFindUniqueArgs} args - Arguments to find a CrewMember
     * @example
     * // Get one CrewMember
     * const crewMember = await prisma.crewMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CrewMemberFindUniqueArgs>(args: SelectSubset<T, CrewMemberFindUniqueArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CrewMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CrewMemberFindUniqueOrThrowArgs} args - Arguments to find a CrewMember
     * @example
     * // Get one CrewMember
     * const crewMember = await prisma.crewMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CrewMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, CrewMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CrewMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrewMemberFindFirstArgs} args - Arguments to find a CrewMember
     * @example
     * // Get one CrewMember
     * const crewMember = await prisma.crewMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CrewMemberFindFirstArgs>(args?: SelectSubset<T, CrewMemberFindFirstArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CrewMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrewMemberFindFirstOrThrowArgs} args - Arguments to find a CrewMember
     * @example
     * // Get one CrewMember
     * const crewMember = await prisma.crewMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CrewMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, CrewMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CrewMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrewMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CrewMembers
     * const crewMembers = await prisma.crewMember.findMany()
     * 
     * // Get first 10 CrewMembers
     * const crewMembers = await prisma.crewMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const crewMemberWithIdOnly = await prisma.crewMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CrewMemberFindManyArgs>(args?: SelectSubset<T, CrewMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CrewMember.
     * @param {CrewMemberCreateArgs} args - Arguments to create a CrewMember.
     * @example
     * // Create one CrewMember
     * const CrewMember = await prisma.crewMember.create({
     *   data: {
     *     // ... data to create a CrewMember
     *   }
     * })
     * 
     */
    create<T extends CrewMemberCreateArgs>(args: SelectSubset<T, CrewMemberCreateArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CrewMembers.
     * @param {CrewMemberCreateManyArgs} args - Arguments to create many CrewMembers.
     * @example
     * // Create many CrewMembers
     * const crewMember = await prisma.crewMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CrewMemberCreateManyArgs>(args?: SelectSubset<T, CrewMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CrewMembers and returns the data saved in the database.
     * @param {CrewMemberCreateManyAndReturnArgs} args - Arguments to create many CrewMembers.
     * @example
     * // Create many CrewMembers
     * const crewMember = await prisma.crewMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CrewMembers and only return the `id`
     * const crewMemberWithIdOnly = await prisma.crewMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CrewMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, CrewMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CrewMember.
     * @param {CrewMemberDeleteArgs} args - Arguments to delete one CrewMember.
     * @example
     * // Delete one CrewMember
     * const CrewMember = await prisma.crewMember.delete({
     *   where: {
     *     // ... filter to delete one CrewMember
     *   }
     * })
     * 
     */
    delete<T extends CrewMemberDeleteArgs>(args: SelectSubset<T, CrewMemberDeleteArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CrewMember.
     * @param {CrewMemberUpdateArgs} args - Arguments to update one CrewMember.
     * @example
     * // Update one CrewMember
     * const crewMember = await prisma.crewMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CrewMemberUpdateArgs>(args: SelectSubset<T, CrewMemberUpdateArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CrewMembers.
     * @param {CrewMemberDeleteManyArgs} args - Arguments to filter CrewMembers to delete.
     * @example
     * // Delete a few CrewMembers
     * const { count } = await prisma.crewMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CrewMemberDeleteManyArgs>(args?: SelectSubset<T, CrewMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CrewMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrewMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CrewMembers
     * const crewMember = await prisma.crewMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CrewMemberUpdateManyArgs>(args: SelectSubset<T, CrewMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CrewMember.
     * @param {CrewMemberUpsertArgs} args - Arguments to update or create a CrewMember.
     * @example
     * // Update or create a CrewMember
     * const crewMember = await prisma.crewMember.upsert({
     *   create: {
     *     // ... data to create a CrewMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CrewMember we want to update
     *   }
     * })
     */
    upsert<T extends CrewMemberUpsertArgs>(args: SelectSubset<T, CrewMemberUpsertArgs<ExtArgs>>): Prisma__CrewMemberClient<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CrewMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrewMemberCountArgs} args - Arguments to filter CrewMembers to count.
     * @example
     * // Count the number of CrewMembers
     * const count = await prisma.crewMember.count({
     *   where: {
     *     // ... the filter for the CrewMembers we want to count
     *   }
     * })
    **/
    count<T extends CrewMemberCountArgs>(
      args?: Subset<T, CrewMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CrewMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CrewMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrewMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CrewMemberAggregateArgs>(args: Subset<T, CrewMemberAggregateArgs>): Prisma.PrismaPromise<GetCrewMemberAggregateType<T>>

    /**
     * Group by CrewMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrewMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CrewMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CrewMemberGroupByArgs['orderBy'] }
        : { orderBy?: CrewMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CrewMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCrewMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CrewMember model
   */
  readonly fields: CrewMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CrewMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CrewMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fishingTrips<T extends CrewMember$fishingTripsArgs<ExtArgs> = {}>(args?: Subset<T, CrewMember$fishingTripsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CrewMember model
   */ 
  interface CrewMemberFieldRefs {
    readonly id: FieldRef<"CrewMember", 'Int'>
    readonly name: FieldRef<"CrewMember", 'String'>
    readonly address: FieldRef<"CrewMember", 'String'>
    readonly position: FieldRef<"CrewMember", 'String'>
    readonly createdAt: FieldRef<"CrewMember", 'DateTime'>
    readonly updatedAt: FieldRef<"CrewMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CrewMember findUnique
   */
  export type CrewMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * Filter, which CrewMember to fetch.
     */
    where: CrewMemberWhereUniqueInput
  }

  /**
   * CrewMember findUniqueOrThrow
   */
  export type CrewMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * Filter, which CrewMember to fetch.
     */
    where: CrewMemberWhereUniqueInput
  }

  /**
   * CrewMember findFirst
   */
  export type CrewMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * Filter, which CrewMember to fetch.
     */
    where?: CrewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrewMembers to fetch.
     */
    orderBy?: CrewMemberOrderByWithRelationInput | CrewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrewMembers.
     */
    cursor?: CrewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrewMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrewMembers.
     */
    distinct?: CrewMemberScalarFieldEnum | CrewMemberScalarFieldEnum[]
  }

  /**
   * CrewMember findFirstOrThrow
   */
  export type CrewMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * Filter, which CrewMember to fetch.
     */
    where?: CrewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrewMembers to fetch.
     */
    orderBy?: CrewMemberOrderByWithRelationInput | CrewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrewMembers.
     */
    cursor?: CrewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrewMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrewMembers.
     */
    distinct?: CrewMemberScalarFieldEnum | CrewMemberScalarFieldEnum[]
  }

  /**
   * CrewMember findMany
   */
  export type CrewMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * Filter, which CrewMembers to fetch.
     */
    where?: CrewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrewMembers to fetch.
     */
    orderBy?: CrewMemberOrderByWithRelationInput | CrewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CrewMembers.
     */
    cursor?: CrewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrewMembers.
     */
    skip?: number
    distinct?: CrewMemberScalarFieldEnum | CrewMemberScalarFieldEnum[]
  }

  /**
   * CrewMember create
   */
  export type CrewMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a CrewMember.
     */
    data: XOR<CrewMemberCreateInput, CrewMemberUncheckedCreateInput>
  }

  /**
   * CrewMember createMany
   */
  export type CrewMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CrewMembers.
     */
    data: CrewMemberCreateManyInput | CrewMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CrewMember createManyAndReturn
   */
  export type CrewMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CrewMembers.
     */
    data: CrewMemberCreateManyInput | CrewMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CrewMember update
   */
  export type CrewMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a CrewMember.
     */
    data: XOR<CrewMemberUpdateInput, CrewMemberUncheckedUpdateInput>
    /**
     * Choose, which CrewMember to update.
     */
    where: CrewMemberWhereUniqueInput
  }

  /**
   * CrewMember updateMany
   */
  export type CrewMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CrewMembers.
     */
    data: XOR<CrewMemberUpdateManyMutationInput, CrewMemberUncheckedUpdateManyInput>
    /**
     * Filter which CrewMembers to update
     */
    where?: CrewMemberWhereInput
  }

  /**
   * CrewMember upsert
   */
  export type CrewMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the CrewMember to update in case it exists.
     */
    where: CrewMemberWhereUniqueInput
    /**
     * In case the CrewMember found by the `where` argument doesn't exist, create a new CrewMember with this data.
     */
    create: XOR<CrewMemberCreateInput, CrewMemberUncheckedCreateInput>
    /**
     * In case the CrewMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CrewMemberUpdateInput, CrewMemberUncheckedUpdateInput>
  }

  /**
   * CrewMember delete
   */
  export type CrewMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    /**
     * Filter which CrewMember to delete.
     */
    where: CrewMemberWhereUniqueInput
  }

  /**
   * CrewMember deleteMany
   */
  export type CrewMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrewMembers to delete
     */
    where?: CrewMemberWhereInput
  }

  /**
   * CrewMember.fishingTrips
   */
  export type CrewMember$fishingTripsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    where?: FishingTripWhereInput
    orderBy?: FishingTripOrderByWithRelationInput | FishingTripOrderByWithRelationInput[]
    cursor?: FishingTripWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FishingTripScalarFieldEnum | FishingTripScalarFieldEnum[]
  }

  /**
   * CrewMember without action
   */
  export type CrewMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
  }


  /**
   * Model FishingTrip
   */

  export type AggregateFishingTrip = {
    _count: FishingTripCountAggregateOutputType | null
    _avg: FishingTripAvgAggregateOutputType | null
    _sum: FishingTripSumAggregateOutputType | null
    _min: FishingTripMinAggregateOutputType | null
    _max: FishingTripMaxAggregateOutputType | null
  }

  export type FishingTripAvgAggregateOutputType = {
    id: number | null
    boatId: number | null
  }

  export type FishingTripSumAggregateOutputType = {
    id: number | null
    boatId: number | null
  }

  export type FishingTripMinAggregateOutputType = {
    id: number | null
    boatId: number | null
    departureDate: Date | null
    returnDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishingTripMaxAggregateOutputType = {
    id: number | null
    boatId: number | null
    departureDate: Date | null
    returnDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishingTripCountAggregateOutputType = {
    id: number
    boatId: number
    departureDate: number
    returnDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FishingTripAvgAggregateInputType = {
    id?: true
    boatId?: true
  }

  export type FishingTripSumAggregateInputType = {
    id?: true
    boatId?: true
  }

  export type FishingTripMinAggregateInputType = {
    id?: true
    boatId?: true
    departureDate?: true
    returnDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishingTripMaxAggregateInputType = {
    id?: true
    boatId?: true
    departureDate?: true
    returnDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishingTripCountAggregateInputType = {
    id?: true
    boatId?: true
    departureDate?: true
    returnDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FishingTripAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishingTrip to aggregate.
     */
    where?: FishingTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingTrips to fetch.
     */
    orderBy?: FishingTripOrderByWithRelationInput | FishingTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FishingTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FishingTrips
    **/
    _count?: true | FishingTripCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FishingTripAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FishingTripSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FishingTripMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FishingTripMaxAggregateInputType
  }

  export type GetFishingTripAggregateType<T extends FishingTripAggregateArgs> = {
        [P in keyof T & keyof AggregateFishingTrip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFishingTrip[P]>
      : GetScalarType<T[P], AggregateFishingTrip[P]>
  }




  export type FishingTripGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishingTripWhereInput
    orderBy?: FishingTripOrderByWithAggregationInput | FishingTripOrderByWithAggregationInput[]
    by: FishingTripScalarFieldEnum[] | FishingTripScalarFieldEnum
    having?: FishingTripScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FishingTripCountAggregateInputType | true
    _avg?: FishingTripAvgAggregateInputType
    _sum?: FishingTripSumAggregateInputType
    _min?: FishingTripMinAggregateInputType
    _max?: FishingTripMaxAggregateInputType
  }

  export type FishingTripGroupByOutputType = {
    id: number
    boatId: number
    departureDate: Date
    returnDate: Date
    createdAt: Date
    updatedAt: Date
    _count: FishingTripCountAggregateOutputType | null
    _avg: FishingTripAvgAggregateOutputType | null
    _sum: FishingTripSumAggregateOutputType | null
    _min: FishingTripMinAggregateOutputType | null
    _max: FishingTripMaxAggregateOutputType | null
  }

  type GetFishingTripGroupByPayload<T extends FishingTripGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FishingTripGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FishingTripGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FishingTripGroupByOutputType[P]>
            : GetScalarType<T[P], FishingTripGroupByOutputType[P]>
        }
      >
    >


  export type FishingTripSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boatId?: boolean
    departureDate?: boolean
    returnDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    boat?: boolean | BoatDefaultArgs<ExtArgs>
    crewMembers?: boolean | FishingTrip$crewMembersArgs<ExtArgs>
    bankVisits?: boolean | FishingTrip$bankVisitsArgs<ExtArgs>
    _count?: boolean | FishingTripCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fishingTrip"]>

  export type FishingTripSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boatId?: boolean
    departureDate?: boolean
    returnDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    boat?: boolean | BoatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fishingTrip"]>

  export type FishingTripSelectScalar = {
    id?: boolean
    boatId?: boolean
    departureDate?: boolean
    returnDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FishingTripInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boat?: boolean | BoatDefaultArgs<ExtArgs>
    crewMembers?: boolean | FishingTrip$crewMembersArgs<ExtArgs>
    bankVisits?: boolean | FishingTrip$bankVisitsArgs<ExtArgs>
    _count?: boolean | FishingTripCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FishingTripIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boat?: boolean | BoatDefaultArgs<ExtArgs>
  }

  export type $FishingTripPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FishingTrip"
    objects: {
      boat: Prisma.$BoatPayload<ExtArgs>
      crewMembers: Prisma.$CrewMemberPayload<ExtArgs>[]
      bankVisits: Prisma.$BankVisitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      boatId: number
      departureDate: Date
      returnDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fishingTrip"]>
    composites: {}
  }

  type FishingTripGetPayload<S extends boolean | null | undefined | FishingTripDefaultArgs> = $Result.GetResult<Prisma.$FishingTripPayload, S>

  type FishingTripCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FishingTripFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FishingTripCountAggregateInputType | true
    }

  export interface FishingTripDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FishingTrip'], meta: { name: 'FishingTrip' } }
    /**
     * Find zero or one FishingTrip that matches the filter.
     * @param {FishingTripFindUniqueArgs} args - Arguments to find a FishingTrip
     * @example
     * // Get one FishingTrip
     * const fishingTrip = await prisma.fishingTrip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FishingTripFindUniqueArgs>(args: SelectSubset<T, FishingTripFindUniqueArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FishingTrip that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FishingTripFindUniqueOrThrowArgs} args - Arguments to find a FishingTrip
     * @example
     * // Get one FishingTrip
     * const fishingTrip = await prisma.fishingTrip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FishingTripFindUniqueOrThrowArgs>(args: SelectSubset<T, FishingTripFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FishingTrip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingTripFindFirstArgs} args - Arguments to find a FishingTrip
     * @example
     * // Get one FishingTrip
     * const fishingTrip = await prisma.fishingTrip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FishingTripFindFirstArgs>(args?: SelectSubset<T, FishingTripFindFirstArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FishingTrip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingTripFindFirstOrThrowArgs} args - Arguments to find a FishingTrip
     * @example
     * // Get one FishingTrip
     * const fishingTrip = await prisma.fishingTrip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FishingTripFindFirstOrThrowArgs>(args?: SelectSubset<T, FishingTripFindFirstOrThrowArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FishingTrips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingTripFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FishingTrips
     * const fishingTrips = await prisma.fishingTrip.findMany()
     * 
     * // Get first 10 FishingTrips
     * const fishingTrips = await prisma.fishingTrip.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fishingTripWithIdOnly = await prisma.fishingTrip.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FishingTripFindManyArgs>(args?: SelectSubset<T, FishingTripFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FishingTrip.
     * @param {FishingTripCreateArgs} args - Arguments to create a FishingTrip.
     * @example
     * // Create one FishingTrip
     * const FishingTrip = await prisma.fishingTrip.create({
     *   data: {
     *     // ... data to create a FishingTrip
     *   }
     * })
     * 
     */
    create<T extends FishingTripCreateArgs>(args: SelectSubset<T, FishingTripCreateArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FishingTrips.
     * @param {FishingTripCreateManyArgs} args - Arguments to create many FishingTrips.
     * @example
     * // Create many FishingTrips
     * const fishingTrip = await prisma.fishingTrip.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FishingTripCreateManyArgs>(args?: SelectSubset<T, FishingTripCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FishingTrips and returns the data saved in the database.
     * @param {FishingTripCreateManyAndReturnArgs} args - Arguments to create many FishingTrips.
     * @example
     * // Create many FishingTrips
     * const fishingTrip = await prisma.fishingTrip.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FishingTrips and only return the `id`
     * const fishingTripWithIdOnly = await prisma.fishingTrip.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FishingTripCreateManyAndReturnArgs>(args?: SelectSubset<T, FishingTripCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FishingTrip.
     * @param {FishingTripDeleteArgs} args - Arguments to delete one FishingTrip.
     * @example
     * // Delete one FishingTrip
     * const FishingTrip = await prisma.fishingTrip.delete({
     *   where: {
     *     // ... filter to delete one FishingTrip
     *   }
     * })
     * 
     */
    delete<T extends FishingTripDeleteArgs>(args: SelectSubset<T, FishingTripDeleteArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FishingTrip.
     * @param {FishingTripUpdateArgs} args - Arguments to update one FishingTrip.
     * @example
     * // Update one FishingTrip
     * const fishingTrip = await prisma.fishingTrip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FishingTripUpdateArgs>(args: SelectSubset<T, FishingTripUpdateArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FishingTrips.
     * @param {FishingTripDeleteManyArgs} args - Arguments to filter FishingTrips to delete.
     * @example
     * // Delete a few FishingTrips
     * const { count } = await prisma.fishingTrip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FishingTripDeleteManyArgs>(args?: SelectSubset<T, FishingTripDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FishingTrips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingTripUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FishingTrips
     * const fishingTrip = await prisma.fishingTrip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FishingTripUpdateManyArgs>(args: SelectSubset<T, FishingTripUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FishingTrip.
     * @param {FishingTripUpsertArgs} args - Arguments to update or create a FishingTrip.
     * @example
     * // Update or create a FishingTrip
     * const fishingTrip = await prisma.fishingTrip.upsert({
     *   create: {
     *     // ... data to create a FishingTrip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FishingTrip we want to update
     *   }
     * })
     */
    upsert<T extends FishingTripUpsertArgs>(args: SelectSubset<T, FishingTripUpsertArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FishingTrips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingTripCountArgs} args - Arguments to filter FishingTrips to count.
     * @example
     * // Count the number of FishingTrips
     * const count = await prisma.fishingTrip.count({
     *   where: {
     *     // ... the filter for the FishingTrips we want to count
     *   }
     * })
    **/
    count<T extends FishingTripCountArgs>(
      args?: Subset<T, FishingTripCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FishingTripCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FishingTrip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingTripAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FishingTripAggregateArgs>(args: Subset<T, FishingTripAggregateArgs>): Prisma.PrismaPromise<GetFishingTripAggregateType<T>>

    /**
     * Group by FishingTrip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingTripGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FishingTripGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FishingTripGroupByArgs['orderBy'] }
        : { orderBy?: FishingTripGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FishingTripGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFishingTripGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FishingTrip model
   */
  readonly fields: FishingTripFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FishingTrip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FishingTripClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    boat<T extends BoatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoatDefaultArgs<ExtArgs>>): Prisma__BoatClient<$Result.GetResult<Prisma.$BoatPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    crewMembers<T extends FishingTrip$crewMembersArgs<ExtArgs> = {}>(args?: Subset<T, FishingTrip$crewMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrewMemberPayload<ExtArgs>, T, "findMany"> | Null>
    bankVisits<T extends FishingTrip$bankVisitsArgs<ExtArgs> = {}>(args?: Subset<T, FishingTrip$bankVisitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FishingTrip model
   */ 
  interface FishingTripFieldRefs {
    readonly id: FieldRef<"FishingTrip", 'Int'>
    readonly boatId: FieldRef<"FishingTrip", 'Int'>
    readonly departureDate: FieldRef<"FishingTrip", 'DateTime'>
    readonly returnDate: FieldRef<"FishingTrip", 'DateTime'>
    readonly createdAt: FieldRef<"FishingTrip", 'DateTime'>
    readonly updatedAt: FieldRef<"FishingTrip", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FishingTrip findUnique
   */
  export type FishingTripFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * Filter, which FishingTrip to fetch.
     */
    where: FishingTripWhereUniqueInput
  }

  /**
   * FishingTrip findUniqueOrThrow
   */
  export type FishingTripFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * Filter, which FishingTrip to fetch.
     */
    where: FishingTripWhereUniqueInput
  }

  /**
   * FishingTrip findFirst
   */
  export type FishingTripFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * Filter, which FishingTrip to fetch.
     */
    where?: FishingTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingTrips to fetch.
     */
    orderBy?: FishingTripOrderByWithRelationInput | FishingTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishingTrips.
     */
    cursor?: FishingTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishingTrips.
     */
    distinct?: FishingTripScalarFieldEnum | FishingTripScalarFieldEnum[]
  }

  /**
   * FishingTrip findFirstOrThrow
   */
  export type FishingTripFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * Filter, which FishingTrip to fetch.
     */
    where?: FishingTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingTrips to fetch.
     */
    orderBy?: FishingTripOrderByWithRelationInput | FishingTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishingTrips.
     */
    cursor?: FishingTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingTrips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishingTrips.
     */
    distinct?: FishingTripScalarFieldEnum | FishingTripScalarFieldEnum[]
  }

  /**
   * FishingTrip findMany
   */
  export type FishingTripFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * Filter, which FishingTrips to fetch.
     */
    where?: FishingTripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingTrips to fetch.
     */
    orderBy?: FishingTripOrderByWithRelationInput | FishingTripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FishingTrips.
     */
    cursor?: FishingTripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingTrips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingTrips.
     */
    skip?: number
    distinct?: FishingTripScalarFieldEnum | FishingTripScalarFieldEnum[]
  }

  /**
   * FishingTrip create
   */
  export type FishingTripCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * The data needed to create a FishingTrip.
     */
    data: XOR<FishingTripCreateInput, FishingTripUncheckedCreateInput>
  }

  /**
   * FishingTrip createMany
   */
  export type FishingTripCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FishingTrips.
     */
    data: FishingTripCreateManyInput | FishingTripCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FishingTrip createManyAndReturn
   */
  export type FishingTripCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FishingTrips.
     */
    data: FishingTripCreateManyInput | FishingTripCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FishingTrip update
   */
  export type FishingTripUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * The data needed to update a FishingTrip.
     */
    data: XOR<FishingTripUpdateInput, FishingTripUncheckedUpdateInput>
    /**
     * Choose, which FishingTrip to update.
     */
    where: FishingTripWhereUniqueInput
  }

  /**
   * FishingTrip updateMany
   */
  export type FishingTripUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FishingTrips.
     */
    data: XOR<FishingTripUpdateManyMutationInput, FishingTripUncheckedUpdateManyInput>
    /**
     * Filter which FishingTrips to update
     */
    where?: FishingTripWhereInput
  }

  /**
   * FishingTrip upsert
   */
  export type FishingTripUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * The filter to search for the FishingTrip to update in case it exists.
     */
    where: FishingTripWhereUniqueInput
    /**
     * In case the FishingTrip found by the `where` argument doesn't exist, create a new FishingTrip with this data.
     */
    create: XOR<FishingTripCreateInput, FishingTripUncheckedCreateInput>
    /**
     * In case the FishingTrip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FishingTripUpdateInput, FishingTripUncheckedUpdateInput>
  }

  /**
   * FishingTrip delete
   */
  export type FishingTripDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
    /**
     * Filter which FishingTrip to delete.
     */
    where: FishingTripWhereUniqueInput
  }

  /**
   * FishingTrip deleteMany
   */
  export type FishingTripDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishingTrips to delete
     */
    where?: FishingTripWhereInput
  }

  /**
   * FishingTrip.crewMembers
   */
  export type FishingTrip$crewMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrewMember
     */
    select?: CrewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrewMemberInclude<ExtArgs> | null
    where?: CrewMemberWhereInput
    orderBy?: CrewMemberOrderByWithRelationInput | CrewMemberOrderByWithRelationInput[]
    cursor?: CrewMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CrewMemberScalarFieldEnum | CrewMemberScalarFieldEnum[]
  }

  /**
   * FishingTrip.bankVisits
   */
  export type FishingTrip$bankVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    where?: BankVisitWhereInput
    orderBy?: BankVisitOrderByWithRelationInput | BankVisitOrderByWithRelationInput[]
    cursor?: BankVisitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BankVisitScalarFieldEnum | BankVisitScalarFieldEnum[]
  }

  /**
   * FishingTrip without action
   */
  export type FishingTripDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingTrip
     */
    select?: FishingTripSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingTripInclude<ExtArgs> | null
  }


  /**
   * Model FishingBank
   */

  export type AggregateFishingBank = {
    _count: FishingBankCountAggregateOutputType | null
    _avg: FishingBankAvgAggregateOutputType | null
    _sum: FishingBankSumAggregateOutputType | null
    _min: FishingBankMinAggregateOutputType | null
    _max: FishingBankMaxAggregateOutputType | null
  }

  export type FishingBankAvgAggregateOutputType = {
    id: number | null
  }

  export type FishingBankSumAggregateOutputType = {
    id: number | null
  }

  export type FishingBankMinAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishingBankMaxAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishingBankCountAggregateOutputType = {
    id: number
    name: number
    location: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FishingBankAvgAggregateInputType = {
    id?: true
  }

  export type FishingBankSumAggregateInputType = {
    id?: true
  }

  export type FishingBankMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishingBankMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishingBankCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FishingBankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishingBank to aggregate.
     */
    where?: FishingBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingBanks to fetch.
     */
    orderBy?: FishingBankOrderByWithRelationInput | FishingBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FishingBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FishingBanks
    **/
    _count?: true | FishingBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FishingBankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FishingBankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FishingBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FishingBankMaxAggregateInputType
  }

  export type GetFishingBankAggregateType<T extends FishingBankAggregateArgs> = {
        [P in keyof T & keyof AggregateFishingBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFishingBank[P]>
      : GetScalarType<T[P], AggregateFishingBank[P]>
  }




  export type FishingBankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishingBankWhereInput
    orderBy?: FishingBankOrderByWithAggregationInput | FishingBankOrderByWithAggregationInput[]
    by: FishingBankScalarFieldEnum[] | FishingBankScalarFieldEnum
    having?: FishingBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FishingBankCountAggregateInputType | true
    _avg?: FishingBankAvgAggregateInputType
    _sum?: FishingBankSumAggregateInputType
    _min?: FishingBankMinAggregateInputType
    _max?: FishingBankMaxAggregateInputType
  }

  export type FishingBankGroupByOutputType = {
    id: number
    name: string
    location: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: FishingBankCountAggregateOutputType | null
    _avg: FishingBankAvgAggregateOutputType | null
    _sum: FishingBankSumAggregateOutputType | null
    _min: FishingBankMinAggregateOutputType | null
    _max: FishingBankMaxAggregateOutputType | null
  }

  type GetFishingBankGroupByPayload<T extends FishingBankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FishingBankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FishingBankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FishingBankGroupByOutputType[P]>
            : GetScalarType<T[P], FishingBankGroupByOutputType[P]>
        }
      >
    >


  export type FishingBankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bankVisits?: boolean | FishingBank$bankVisitsArgs<ExtArgs>
    _count?: boolean | FishingBankCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fishingBank"]>

  export type FishingBankSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fishingBank"]>

  export type FishingBankSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FishingBankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankVisits?: boolean | FishingBank$bankVisitsArgs<ExtArgs>
    _count?: boolean | FishingBankCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FishingBankIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FishingBankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FishingBank"
    objects: {
      bankVisits: Prisma.$BankVisitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      location: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fishingBank"]>
    composites: {}
  }

  type FishingBankGetPayload<S extends boolean | null | undefined | FishingBankDefaultArgs> = $Result.GetResult<Prisma.$FishingBankPayload, S>

  type FishingBankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FishingBankFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FishingBankCountAggregateInputType | true
    }

  export interface FishingBankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FishingBank'], meta: { name: 'FishingBank' } }
    /**
     * Find zero or one FishingBank that matches the filter.
     * @param {FishingBankFindUniqueArgs} args - Arguments to find a FishingBank
     * @example
     * // Get one FishingBank
     * const fishingBank = await prisma.fishingBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FishingBankFindUniqueArgs>(args: SelectSubset<T, FishingBankFindUniqueArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FishingBank that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FishingBankFindUniqueOrThrowArgs} args - Arguments to find a FishingBank
     * @example
     * // Get one FishingBank
     * const fishingBank = await prisma.fishingBank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FishingBankFindUniqueOrThrowArgs>(args: SelectSubset<T, FishingBankFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FishingBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingBankFindFirstArgs} args - Arguments to find a FishingBank
     * @example
     * // Get one FishingBank
     * const fishingBank = await prisma.fishingBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FishingBankFindFirstArgs>(args?: SelectSubset<T, FishingBankFindFirstArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FishingBank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingBankFindFirstOrThrowArgs} args - Arguments to find a FishingBank
     * @example
     * // Get one FishingBank
     * const fishingBank = await prisma.fishingBank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FishingBankFindFirstOrThrowArgs>(args?: SelectSubset<T, FishingBankFindFirstOrThrowArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FishingBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingBankFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FishingBanks
     * const fishingBanks = await prisma.fishingBank.findMany()
     * 
     * // Get first 10 FishingBanks
     * const fishingBanks = await prisma.fishingBank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fishingBankWithIdOnly = await prisma.fishingBank.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FishingBankFindManyArgs>(args?: SelectSubset<T, FishingBankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FishingBank.
     * @param {FishingBankCreateArgs} args - Arguments to create a FishingBank.
     * @example
     * // Create one FishingBank
     * const FishingBank = await prisma.fishingBank.create({
     *   data: {
     *     // ... data to create a FishingBank
     *   }
     * })
     * 
     */
    create<T extends FishingBankCreateArgs>(args: SelectSubset<T, FishingBankCreateArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FishingBanks.
     * @param {FishingBankCreateManyArgs} args - Arguments to create many FishingBanks.
     * @example
     * // Create many FishingBanks
     * const fishingBank = await prisma.fishingBank.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FishingBankCreateManyArgs>(args?: SelectSubset<T, FishingBankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FishingBanks and returns the data saved in the database.
     * @param {FishingBankCreateManyAndReturnArgs} args - Arguments to create many FishingBanks.
     * @example
     * // Create many FishingBanks
     * const fishingBank = await prisma.fishingBank.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FishingBanks and only return the `id`
     * const fishingBankWithIdOnly = await prisma.fishingBank.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FishingBankCreateManyAndReturnArgs>(args?: SelectSubset<T, FishingBankCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FishingBank.
     * @param {FishingBankDeleteArgs} args - Arguments to delete one FishingBank.
     * @example
     * // Delete one FishingBank
     * const FishingBank = await prisma.fishingBank.delete({
     *   where: {
     *     // ... filter to delete one FishingBank
     *   }
     * })
     * 
     */
    delete<T extends FishingBankDeleteArgs>(args: SelectSubset<T, FishingBankDeleteArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FishingBank.
     * @param {FishingBankUpdateArgs} args - Arguments to update one FishingBank.
     * @example
     * // Update one FishingBank
     * const fishingBank = await prisma.fishingBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FishingBankUpdateArgs>(args: SelectSubset<T, FishingBankUpdateArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FishingBanks.
     * @param {FishingBankDeleteManyArgs} args - Arguments to filter FishingBanks to delete.
     * @example
     * // Delete a few FishingBanks
     * const { count } = await prisma.fishingBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FishingBankDeleteManyArgs>(args?: SelectSubset<T, FishingBankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FishingBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FishingBanks
     * const fishingBank = await prisma.fishingBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FishingBankUpdateManyArgs>(args: SelectSubset<T, FishingBankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FishingBank.
     * @param {FishingBankUpsertArgs} args - Arguments to update or create a FishingBank.
     * @example
     * // Update or create a FishingBank
     * const fishingBank = await prisma.fishingBank.upsert({
     *   create: {
     *     // ... data to create a FishingBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FishingBank we want to update
     *   }
     * })
     */
    upsert<T extends FishingBankUpsertArgs>(args: SelectSubset<T, FishingBankUpsertArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FishingBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingBankCountArgs} args - Arguments to filter FishingBanks to count.
     * @example
     * // Count the number of FishingBanks
     * const count = await prisma.fishingBank.count({
     *   where: {
     *     // ... the filter for the FishingBanks we want to count
     *   }
     * })
    **/
    count<T extends FishingBankCountArgs>(
      args?: Subset<T, FishingBankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FishingBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FishingBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FishingBankAggregateArgs>(args: Subset<T, FishingBankAggregateArgs>): Prisma.PrismaPromise<GetFishingBankAggregateType<T>>

    /**
     * Group by FishingBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishingBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FishingBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FishingBankGroupByArgs['orderBy'] }
        : { orderBy?: FishingBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FishingBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFishingBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FishingBank model
   */
  readonly fields: FishingBankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FishingBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FishingBankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bankVisits<T extends FishingBank$bankVisitsArgs<ExtArgs> = {}>(args?: Subset<T, FishingBank$bankVisitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FishingBank model
   */ 
  interface FishingBankFieldRefs {
    readonly id: FieldRef<"FishingBank", 'Int'>
    readonly name: FieldRef<"FishingBank", 'String'>
    readonly location: FieldRef<"FishingBank", 'String'>
    readonly description: FieldRef<"FishingBank", 'String'>
    readonly createdAt: FieldRef<"FishingBank", 'DateTime'>
    readonly updatedAt: FieldRef<"FishingBank", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FishingBank findUnique
   */
  export type FishingBankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * Filter, which FishingBank to fetch.
     */
    where: FishingBankWhereUniqueInput
  }

  /**
   * FishingBank findUniqueOrThrow
   */
  export type FishingBankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * Filter, which FishingBank to fetch.
     */
    where: FishingBankWhereUniqueInput
  }

  /**
   * FishingBank findFirst
   */
  export type FishingBankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * Filter, which FishingBank to fetch.
     */
    where?: FishingBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingBanks to fetch.
     */
    orderBy?: FishingBankOrderByWithRelationInput | FishingBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishingBanks.
     */
    cursor?: FishingBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishingBanks.
     */
    distinct?: FishingBankScalarFieldEnum | FishingBankScalarFieldEnum[]
  }

  /**
   * FishingBank findFirstOrThrow
   */
  export type FishingBankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * Filter, which FishingBank to fetch.
     */
    where?: FishingBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingBanks to fetch.
     */
    orderBy?: FishingBankOrderByWithRelationInput | FishingBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishingBanks.
     */
    cursor?: FishingBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingBanks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishingBanks.
     */
    distinct?: FishingBankScalarFieldEnum | FishingBankScalarFieldEnum[]
  }

  /**
   * FishingBank findMany
   */
  export type FishingBankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * Filter, which FishingBanks to fetch.
     */
    where?: FishingBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishingBanks to fetch.
     */
    orderBy?: FishingBankOrderByWithRelationInput | FishingBankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FishingBanks.
     */
    cursor?: FishingBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishingBanks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishingBanks.
     */
    skip?: number
    distinct?: FishingBankScalarFieldEnum | FishingBankScalarFieldEnum[]
  }

  /**
   * FishingBank create
   */
  export type FishingBankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * The data needed to create a FishingBank.
     */
    data: XOR<FishingBankCreateInput, FishingBankUncheckedCreateInput>
  }

  /**
   * FishingBank createMany
   */
  export type FishingBankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FishingBanks.
     */
    data: FishingBankCreateManyInput | FishingBankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FishingBank createManyAndReturn
   */
  export type FishingBankCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FishingBanks.
     */
    data: FishingBankCreateManyInput | FishingBankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FishingBank update
   */
  export type FishingBankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * The data needed to update a FishingBank.
     */
    data: XOR<FishingBankUpdateInput, FishingBankUncheckedUpdateInput>
    /**
     * Choose, which FishingBank to update.
     */
    where: FishingBankWhereUniqueInput
  }

  /**
   * FishingBank updateMany
   */
  export type FishingBankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FishingBanks.
     */
    data: XOR<FishingBankUpdateManyMutationInput, FishingBankUncheckedUpdateManyInput>
    /**
     * Filter which FishingBanks to update
     */
    where?: FishingBankWhereInput
  }

  /**
   * FishingBank upsert
   */
  export type FishingBankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * The filter to search for the FishingBank to update in case it exists.
     */
    where: FishingBankWhereUniqueInput
    /**
     * In case the FishingBank found by the `where` argument doesn't exist, create a new FishingBank with this data.
     */
    create: XOR<FishingBankCreateInput, FishingBankUncheckedCreateInput>
    /**
     * In case the FishingBank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FishingBankUpdateInput, FishingBankUncheckedUpdateInput>
  }

  /**
   * FishingBank delete
   */
  export type FishingBankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
    /**
     * Filter which FishingBank to delete.
     */
    where: FishingBankWhereUniqueInput
  }

  /**
   * FishingBank deleteMany
   */
  export type FishingBankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishingBanks to delete
     */
    where?: FishingBankWhereInput
  }

  /**
   * FishingBank.bankVisits
   */
  export type FishingBank$bankVisitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    where?: BankVisitWhereInput
    orderBy?: BankVisitOrderByWithRelationInput | BankVisitOrderByWithRelationInput[]
    cursor?: BankVisitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BankVisitScalarFieldEnum | BankVisitScalarFieldEnum[]
  }

  /**
   * FishingBank without action
   */
  export type FishingBankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishingBank
     */
    select?: FishingBankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishingBankInclude<ExtArgs> | null
  }


  /**
   * Model BankVisit
   */

  export type AggregateBankVisit = {
    _count: BankVisitCountAggregateOutputType | null
    _avg: BankVisitAvgAggregateOutputType | null
    _sum: BankVisitSumAggregateOutputType | null
    _min: BankVisitMinAggregateOutputType | null
    _max: BankVisitMaxAggregateOutputType | null
  }

  export type BankVisitAvgAggregateOutputType = {
    id: number | null
    fishingTripId: number | null
    fishingBankId: number | null
  }

  export type BankVisitSumAggregateOutputType = {
    id: number | null
    fishingTripId: number | null
    fishingBankId: number | null
  }

  export type BankVisitMinAggregateOutputType = {
    id: number | null
    fishingTripId: number | null
    fishingBankId: number | null
    arrivalDate: Date | null
    departureDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankVisitMaxAggregateOutputType = {
    id: number | null
    fishingTripId: number | null
    fishingBankId: number | null
    arrivalDate: Date | null
    departureDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankVisitCountAggregateOutputType = {
    id: number
    fishingTripId: number
    fishingBankId: number
    arrivalDate: number
    departureDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BankVisitAvgAggregateInputType = {
    id?: true
    fishingTripId?: true
    fishingBankId?: true
  }

  export type BankVisitSumAggregateInputType = {
    id?: true
    fishingTripId?: true
    fishingBankId?: true
  }

  export type BankVisitMinAggregateInputType = {
    id?: true
    fishingTripId?: true
    fishingBankId?: true
    arrivalDate?: true
    departureDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankVisitMaxAggregateInputType = {
    id?: true
    fishingTripId?: true
    fishingBankId?: true
    arrivalDate?: true
    departureDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankVisitCountAggregateInputType = {
    id?: true
    fishingTripId?: true
    fishingBankId?: true
    arrivalDate?: true
    departureDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BankVisitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankVisit to aggregate.
     */
    where?: BankVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankVisits to fetch.
     */
    orderBy?: BankVisitOrderByWithRelationInput | BankVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BankVisits
    **/
    _count?: true | BankVisitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BankVisitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BankVisitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankVisitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankVisitMaxAggregateInputType
  }

  export type GetBankVisitAggregateType<T extends BankVisitAggregateArgs> = {
        [P in keyof T & keyof AggregateBankVisit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBankVisit[P]>
      : GetScalarType<T[P], AggregateBankVisit[P]>
  }




  export type BankVisitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankVisitWhereInput
    orderBy?: BankVisitOrderByWithAggregationInput | BankVisitOrderByWithAggregationInput[]
    by: BankVisitScalarFieldEnum[] | BankVisitScalarFieldEnum
    having?: BankVisitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankVisitCountAggregateInputType | true
    _avg?: BankVisitAvgAggregateInputType
    _sum?: BankVisitSumAggregateInputType
    _min?: BankVisitMinAggregateInputType
    _max?: BankVisitMaxAggregateInputType
  }

  export type BankVisitGroupByOutputType = {
    id: number
    fishingTripId: number
    fishingBankId: number
    arrivalDate: Date
    departureDate: Date
    createdAt: Date
    updatedAt: Date
    _count: BankVisitCountAggregateOutputType | null
    _avg: BankVisitAvgAggregateOutputType | null
    _sum: BankVisitSumAggregateOutputType | null
    _min: BankVisitMinAggregateOutputType | null
    _max: BankVisitMaxAggregateOutputType | null
  }

  type GetBankVisitGroupByPayload<T extends BankVisitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankVisitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankVisitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankVisitGroupByOutputType[P]>
            : GetScalarType<T[P], BankVisitGroupByOutputType[P]>
        }
      >
    >


  export type BankVisitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fishingTripId?: boolean
    fishingBankId?: boolean
    arrivalDate?: boolean
    departureDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fishingTrip?: boolean | FishingTripDefaultArgs<ExtArgs>
    fishingBank?: boolean | FishingBankDefaultArgs<ExtArgs>
    fishCatches?: boolean | BankVisit$fishCatchesArgs<ExtArgs>
    _count?: boolean | BankVisitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankVisit"]>

  export type BankVisitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fishingTripId?: boolean
    fishingBankId?: boolean
    arrivalDate?: boolean
    departureDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fishingTrip?: boolean | FishingTripDefaultArgs<ExtArgs>
    fishingBank?: boolean | FishingBankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankVisit"]>

  export type BankVisitSelectScalar = {
    id?: boolean
    fishingTripId?: boolean
    fishingBankId?: boolean
    arrivalDate?: boolean
    departureDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BankVisitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishingTrip?: boolean | FishingTripDefaultArgs<ExtArgs>
    fishingBank?: boolean | FishingBankDefaultArgs<ExtArgs>
    fishCatches?: boolean | BankVisit$fishCatchesArgs<ExtArgs>
    _count?: boolean | BankVisitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BankVisitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishingTrip?: boolean | FishingTripDefaultArgs<ExtArgs>
    fishingBank?: boolean | FishingBankDefaultArgs<ExtArgs>
  }

  export type $BankVisitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BankVisit"
    objects: {
      fishingTrip: Prisma.$FishingTripPayload<ExtArgs>
      fishingBank: Prisma.$FishingBankPayload<ExtArgs>
      fishCatches: Prisma.$FishCatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fishingTripId: number
      fishingBankId: number
      arrivalDate: Date
      departureDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bankVisit"]>
    composites: {}
  }

  type BankVisitGetPayload<S extends boolean | null | undefined | BankVisitDefaultArgs> = $Result.GetResult<Prisma.$BankVisitPayload, S>

  type BankVisitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BankVisitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BankVisitCountAggregateInputType | true
    }

  export interface BankVisitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankVisit'], meta: { name: 'BankVisit' } }
    /**
     * Find zero or one BankVisit that matches the filter.
     * @param {BankVisitFindUniqueArgs} args - Arguments to find a BankVisit
     * @example
     * // Get one BankVisit
     * const bankVisit = await prisma.bankVisit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BankVisitFindUniqueArgs>(args: SelectSubset<T, BankVisitFindUniqueArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BankVisit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BankVisitFindUniqueOrThrowArgs} args - Arguments to find a BankVisit
     * @example
     * // Get one BankVisit
     * const bankVisit = await prisma.bankVisit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BankVisitFindUniqueOrThrowArgs>(args: SelectSubset<T, BankVisitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BankVisit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankVisitFindFirstArgs} args - Arguments to find a BankVisit
     * @example
     * // Get one BankVisit
     * const bankVisit = await prisma.bankVisit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BankVisitFindFirstArgs>(args?: SelectSubset<T, BankVisitFindFirstArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BankVisit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankVisitFindFirstOrThrowArgs} args - Arguments to find a BankVisit
     * @example
     * // Get one BankVisit
     * const bankVisit = await prisma.bankVisit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BankVisitFindFirstOrThrowArgs>(args?: SelectSubset<T, BankVisitFindFirstOrThrowArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BankVisits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankVisitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BankVisits
     * const bankVisits = await prisma.bankVisit.findMany()
     * 
     * // Get first 10 BankVisits
     * const bankVisits = await prisma.bankVisit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankVisitWithIdOnly = await prisma.bankVisit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BankVisitFindManyArgs>(args?: SelectSubset<T, BankVisitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BankVisit.
     * @param {BankVisitCreateArgs} args - Arguments to create a BankVisit.
     * @example
     * // Create one BankVisit
     * const BankVisit = await prisma.bankVisit.create({
     *   data: {
     *     // ... data to create a BankVisit
     *   }
     * })
     * 
     */
    create<T extends BankVisitCreateArgs>(args: SelectSubset<T, BankVisitCreateArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BankVisits.
     * @param {BankVisitCreateManyArgs} args - Arguments to create many BankVisits.
     * @example
     * // Create many BankVisits
     * const bankVisit = await prisma.bankVisit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BankVisitCreateManyArgs>(args?: SelectSubset<T, BankVisitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BankVisits and returns the data saved in the database.
     * @param {BankVisitCreateManyAndReturnArgs} args - Arguments to create many BankVisits.
     * @example
     * // Create many BankVisits
     * const bankVisit = await prisma.bankVisit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BankVisits and only return the `id`
     * const bankVisitWithIdOnly = await prisma.bankVisit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BankVisitCreateManyAndReturnArgs>(args?: SelectSubset<T, BankVisitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BankVisit.
     * @param {BankVisitDeleteArgs} args - Arguments to delete one BankVisit.
     * @example
     * // Delete one BankVisit
     * const BankVisit = await prisma.bankVisit.delete({
     *   where: {
     *     // ... filter to delete one BankVisit
     *   }
     * })
     * 
     */
    delete<T extends BankVisitDeleteArgs>(args: SelectSubset<T, BankVisitDeleteArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BankVisit.
     * @param {BankVisitUpdateArgs} args - Arguments to update one BankVisit.
     * @example
     * // Update one BankVisit
     * const bankVisit = await prisma.bankVisit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BankVisitUpdateArgs>(args: SelectSubset<T, BankVisitUpdateArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BankVisits.
     * @param {BankVisitDeleteManyArgs} args - Arguments to filter BankVisits to delete.
     * @example
     * // Delete a few BankVisits
     * const { count } = await prisma.bankVisit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BankVisitDeleteManyArgs>(args?: SelectSubset<T, BankVisitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankVisitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BankVisits
     * const bankVisit = await prisma.bankVisit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BankVisitUpdateManyArgs>(args: SelectSubset<T, BankVisitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BankVisit.
     * @param {BankVisitUpsertArgs} args - Arguments to update or create a BankVisit.
     * @example
     * // Update or create a BankVisit
     * const bankVisit = await prisma.bankVisit.upsert({
     *   create: {
     *     // ... data to create a BankVisit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BankVisit we want to update
     *   }
     * })
     */
    upsert<T extends BankVisitUpsertArgs>(args: SelectSubset<T, BankVisitUpsertArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BankVisits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankVisitCountArgs} args - Arguments to filter BankVisits to count.
     * @example
     * // Count the number of BankVisits
     * const count = await prisma.bankVisit.count({
     *   where: {
     *     // ... the filter for the BankVisits we want to count
     *   }
     * })
    **/
    count<T extends BankVisitCountArgs>(
      args?: Subset<T, BankVisitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankVisitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BankVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankVisitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankVisitAggregateArgs>(args: Subset<T, BankVisitAggregateArgs>): Prisma.PrismaPromise<GetBankVisitAggregateType<T>>

    /**
     * Group by BankVisit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankVisitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankVisitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankVisitGroupByArgs['orderBy'] }
        : { orderBy?: BankVisitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankVisitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankVisitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BankVisit model
   */
  readonly fields: BankVisitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BankVisit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankVisitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fishingTrip<T extends FishingTripDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FishingTripDefaultArgs<ExtArgs>>): Prisma__FishingTripClient<$Result.GetResult<Prisma.$FishingTripPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fishingBank<T extends FishingBankDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FishingBankDefaultArgs<ExtArgs>>): Prisma__FishingBankClient<$Result.GetResult<Prisma.$FishingBankPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fishCatches<T extends BankVisit$fishCatchesArgs<ExtArgs> = {}>(args?: Subset<T, BankVisit$fishCatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BankVisit model
   */ 
  interface BankVisitFieldRefs {
    readonly id: FieldRef<"BankVisit", 'Int'>
    readonly fishingTripId: FieldRef<"BankVisit", 'Int'>
    readonly fishingBankId: FieldRef<"BankVisit", 'Int'>
    readonly arrivalDate: FieldRef<"BankVisit", 'DateTime'>
    readonly departureDate: FieldRef<"BankVisit", 'DateTime'>
    readonly createdAt: FieldRef<"BankVisit", 'DateTime'>
    readonly updatedAt: FieldRef<"BankVisit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BankVisit findUnique
   */
  export type BankVisitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * Filter, which BankVisit to fetch.
     */
    where: BankVisitWhereUniqueInput
  }

  /**
   * BankVisit findUniqueOrThrow
   */
  export type BankVisitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * Filter, which BankVisit to fetch.
     */
    where: BankVisitWhereUniqueInput
  }

  /**
   * BankVisit findFirst
   */
  export type BankVisitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * Filter, which BankVisit to fetch.
     */
    where?: BankVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankVisits to fetch.
     */
    orderBy?: BankVisitOrderByWithRelationInput | BankVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankVisits.
     */
    cursor?: BankVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankVisits.
     */
    distinct?: BankVisitScalarFieldEnum | BankVisitScalarFieldEnum[]
  }

  /**
   * BankVisit findFirstOrThrow
   */
  export type BankVisitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * Filter, which BankVisit to fetch.
     */
    where?: BankVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankVisits to fetch.
     */
    orderBy?: BankVisitOrderByWithRelationInput | BankVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankVisits.
     */
    cursor?: BankVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankVisits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankVisits.
     */
    distinct?: BankVisitScalarFieldEnum | BankVisitScalarFieldEnum[]
  }

  /**
   * BankVisit findMany
   */
  export type BankVisitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * Filter, which BankVisits to fetch.
     */
    where?: BankVisitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankVisits to fetch.
     */
    orderBy?: BankVisitOrderByWithRelationInput | BankVisitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BankVisits.
     */
    cursor?: BankVisitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankVisits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankVisits.
     */
    skip?: number
    distinct?: BankVisitScalarFieldEnum | BankVisitScalarFieldEnum[]
  }

  /**
   * BankVisit create
   */
  export type BankVisitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * The data needed to create a BankVisit.
     */
    data: XOR<BankVisitCreateInput, BankVisitUncheckedCreateInput>
  }

  /**
   * BankVisit createMany
   */
  export type BankVisitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BankVisits.
     */
    data: BankVisitCreateManyInput | BankVisitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BankVisit createManyAndReturn
   */
  export type BankVisitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BankVisits.
     */
    data: BankVisitCreateManyInput | BankVisitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BankVisit update
   */
  export type BankVisitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * The data needed to update a BankVisit.
     */
    data: XOR<BankVisitUpdateInput, BankVisitUncheckedUpdateInput>
    /**
     * Choose, which BankVisit to update.
     */
    where: BankVisitWhereUniqueInput
  }

  /**
   * BankVisit updateMany
   */
  export type BankVisitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BankVisits.
     */
    data: XOR<BankVisitUpdateManyMutationInput, BankVisitUncheckedUpdateManyInput>
    /**
     * Filter which BankVisits to update
     */
    where?: BankVisitWhereInput
  }

  /**
   * BankVisit upsert
   */
  export type BankVisitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * The filter to search for the BankVisit to update in case it exists.
     */
    where: BankVisitWhereUniqueInput
    /**
     * In case the BankVisit found by the `where` argument doesn't exist, create a new BankVisit with this data.
     */
    create: XOR<BankVisitCreateInput, BankVisitUncheckedCreateInput>
    /**
     * In case the BankVisit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankVisitUpdateInput, BankVisitUncheckedUpdateInput>
  }

  /**
   * BankVisit delete
   */
  export type BankVisitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
    /**
     * Filter which BankVisit to delete.
     */
    where: BankVisitWhereUniqueInput
  }

  /**
   * BankVisit deleteMany
   */
  export type BankVisitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankVisits to delete
     */
    where?: BankVisitWhereInput
  }

  /**
   * BankVisit.fishCatches
   */
  export type BankVisit$fishCatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    where?: FishCatchWhereInput
    orderBy?: FishCatchOrderByWithRelationInput | FishCatchOrderByWithRelationInput[]
    cursor?: FishCatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FishCatchScalarFieldEnum | FishCatchScalarFieldEnum[]
  }

  /**
   * BankVisit without action
   */
  export type BankVisitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankVisit
     */
    select?: BankVisitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankVisitInclude<ExtArgs> | null
  }


  /**
   * Model FishType
   */

  export type AggregateFishType = {
    _count: FishTypeCountAggregateOutputType | null
    _avg: FishTypeAvgAggregateOutputType | null
    _sum: FishTypeSumAggregateOutputType | null
    _min: FishTypeMinAggregateOutputType | null
    _max: FishTypeMaxAggregateOutputType | null
  }

  export type FishTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type FishTypeSumAggregateOutputType = {
    id: number | null
  }

  export type FishTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishTypeCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FishTypeAvgAggregateInputType = {
    id?: true
  }

  export type FishTypeSumAggregateInputType = {
    id?: true
  }

  export type FishTypeMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishTypeMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishTypeCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FishTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishType to aggregate.
     */
    where?: FishTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishTypes to fetch.
     */
    orderBy?: FishTypeOrderByWithRelationInput | FishTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FishTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FishTypes
    **/
    _count?: true | FishTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FishTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FishTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FishTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FishTypeMaxAggregateInputType
  }

  export type GetFishTypeAggregateType<T extends FishTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateFishType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFishType[P]>
      : GetScalarType<T[P], AggregateFishType[P]>
  }




  export type FishTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishTypeWhereInput
    orderBy?: FishTypeOrderByWithAggregationInput | FishTypeOrderByWithAggregationInput[]
    by: FishTypeScalarFieldEnum[] | FishTypeScalarFieldEnum
    having?: FishTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FishTypeCountAggregateInputType | true
    _avg?: FishTypeAvgAggregateInputType
    _sum?: FishTypeSumAggregateInputType
    _min?: FishTypeMinAggregateInputType
    _max?: FishTypeMaxAggregateInputType
  }

  export type FishTypeGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FishTypeCountAggregateOutputType | null
    _avg: FishTypeAvgAggregateOutputType | null
    _sum: FishTypeSumAggregateOutputType | null
    _min: FishTypeMinAggregateOutputType | null
    _max: FishTypeMaxAggregateOutputType | null
  }

  type GetFishTypeGroupByPayload<T extends FishTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FishTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FishTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FishTypeGroupByOutputType[P]>
            : GetScalarType<T[P], FishTypeGroupByOutputType[P]>
        }
      >
    >


  export type FishTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fishCatches?: boolean | FishType$fishCatchesArgs<ExtArgs>
    _count?: boolean | FishTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fishType"]>

  export type FishTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fishType"]>

  export type FishTypeSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FishTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fishCatches?: boolean | FishType$fishCatchesArgs<ExtArgs>
    _count?: boolean | FishTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FishTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FishTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FishType"
    objects: {
      fishCatches: Prisma.$FishCatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fishType"]>
    composites: {}
  }

  type FishTypeGetPayload<S extends boolean | null | undefined | FishTypeDefaultArgs> = $Result.GetResult<Prisma.$FishTypePayload, S>

  type FishTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FishTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FishTypeCountAggregateInputType | true
    }

  export interface FishTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FishType'], meta: { name: 'FishType' } }
    /**
     * Find zero or one FishType that matches the filter.
     * @param {FishTypeFindUniqueArgs} args - Arguments to find a FishType
     * @example
     * // Get one FishType
     * const fishType = await prisma.fishType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FishTypeFindUniqueArgs>(args: SelectSubset<T, FishTypeFindUniqueArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FishType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FishTypeFindUniqueOrThrowArgs} args - Arguments to find a FishType
     * @example
     * // Get one FishType
     * const fishType = await prisma.fishType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FishTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, FishTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FishType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishTypeFindFirstArgs} args - Arguments to find a FishType
     * @example
     * // Get one FishType
     * const fishType = await prisma.fishType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FishTypeFindFirstArgs>(args?: SelectSubset<T, FishTypeFindFirstArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FishType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishTypeFindFirstOrThrowArgs} args - Arguments to find a FishType
     * @example
     * // Get one FishType
     * const fishType = await prisma.fishType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FishTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, FishTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FishTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FishTypes
     * const fishTypes = await prisma.fishType.findMany()
     * 
     * // Get first 10 FishTypes
     * const fishTypes = await prisma.fishType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fishTypeWithIdOnly = await prisma.fishType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FishTypeFindManyArgs>(args?: SelectSubset<T, FishTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FishType.
     * @param {FishTypeCreateArgs} args - Arguments to create a FishType.
     * @example
     * // Create one FishType
     * const FishType = await prisma.fishType.create({
     *   data: {
     *     // ... data to create a FishType
     *   }
     * })
     * 
     */
    create<T extends FishTypeCreateArgs>(args: SelectSubset<T, FishTypeCreateArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FishTypes.
     * @param {FishTypeCreateManyArgs} args - Arguments to create many FishTypes.
     * @example
     * // Create many FishTypes
     * const fishType = await prisma.fishType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FishTypeCreateManyArgs>(args?: SelectSubset<T, FishTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FishTypes and returns the data saved in the database.
     * @param {FishTypeCreateManyAndReturnArgs} args - Arguments to create many FishTypes.
     * @example
     * // Create many FishTypes
     * const fishType = await prisma.fishType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FishTypes and only return the `id`
     * const fishTypeWithIdOnly = await prisma.fishType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FishTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, FishTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FishType.
     * @param {FishTypeDeleteArgs} args - Arguments to delete one FishType.
     * @example
     * // Delete one FishType
     * const FishType = await prisma.fishType.delete({
     *   where: {
     *     // ... filter to delete one FishType
     *   }
     * })
     * 
     */
    delete<T extends FishTypeDeleteArgs>(args: SelectSubset<T, FishTypeDeleteArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FishType.
     * @param {FishTypeUpdateArgs} args - Arguments to update one FishType.
     * @example
     * // Update one FishType
     * const fishType = await prisma.fishType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FishTypeUpdateArgs>(args: SelectSubset<T, FishTypeUpdateArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FishTypes.
     * @param {FishTypeDeleteManyArgs} args - Arguments to filter FishTypes to delete.
     * @example
     * // Delete a few FishTypes
     * const { count } = await prisma.fishType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FishTypeDeleteManyArgs>(args?: SelectSubset<T, FishTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FishTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FishTypes
     * const fishType = await prisma.fishType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FishTypeUpdateManyArgs>(args: SelectSubset<T, FishTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FishType.
     * @param {FishTypeUpsertArgs} args - Arguments to update or create a FishType.
     * @example
     * // Update or create a FishType
     * const fishType = await prisma.fishType.upsert({
     *   create: {
     *     // ... data to create a FishType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FishType we want to update
     *   }
     * })
     */
    upsert<T extends FishTypeUpsertArgs>(args: SelectSubset<T, FishTypeUpsertArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FishTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishTypeCountArgs} args - Arguments to filter FishTypes to count.
     * @example
     * // Count the number of FishTypes
     * const count = await prisma.fishType.count({
     *   where: {
     *     // ... the filter for the FishTypes we want to count
     *   }
     * })
    **/
    count<T extends FishTypeCountArgs>(
      args?: Subset<T, FishTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FishTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FishType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FishTypeAggregateArgs>(args: Subset<T, FishTypeAggregateArgs>): Prisma.PrismaPromise<GetFishTypeAggregateType<T>>

    /**
     * Group by FishType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FishTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FishTypeGroupByArgs['orderBy'] }
        : { orderBy?: FishTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FishTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFishTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FishType model
   */
  readonly fields: FishTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FishType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FishTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fishCatches<T extends FishType$fishCatchesArgs<ExtArgs> = {}>(args?: Subset<T, FishType$fishCatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FishType model
   */ 
  interface FishTypeFieldRefs {
    readonly id: FieldRef<"FishType", 'Int'>
    readonly name: FieldRef<"FishType", 'String'>
    readonly createdAt: FieldRef<"FishType", 'DateTime'>
    readonly updatedAt: FieldRef<"FishType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FishType findUnique
   */
  export type FishTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * Filter, which FishType to fetch.
     */
    where: FishTypeWhereUniqueInput
  }

  /**
   * FishType findUniqueOrThrow
   */
  export type FishTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * Filter, which FishType to fetch.
     */
    where: FishTypeWhereUniqueInput
  }

  /**
   * FishType findFirst
   */
  export type FishTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * Filter, which FishType to fetch.
     */
    where?: FishTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishTypes to fetch.
     */
    orderBy?: FishTypeOrderByWithRelationInput | FishTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishTypes.
     */
    cursor?: FishTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishTypes.
     */
    distinct?: FishTypeScalarFieldEnum | FishTypeScalarFieldEnum[]
  }

  /**
   * FishType findFirstOrThrow
   */
  export type FishTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * Filter, which FishType to fetch.
     */
    where?: FishTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishTypes to fetch.
     */
    orderBy?: FishTypeOrderByWithRelationInput | FishTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishTypes.
     */
    cursor?: FishTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishTypes.
     */
    distinct?: FishTypeScalarFieldEnum | FishTypeScalarFieldEnum[]
  }

  /**
   * FishType findMany
   */
  export type FishTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * Filter, which FishTypes to fetch.
     */
    where?: FishTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishTypes to fetch.
     */
    orderBy?: FishTypeOrderByWithRelationInput | FishTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FishTypes.
     */
    cursor?: FishTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishTypes.
     */
    skip?: number
    distinct?: FishTypeScalarFieldEnum | FishTypeScalarFieldEnum[]
  }

  /**
   * FishType create
   */
  export type FishTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a FishType.
     */
    data: XOR<FishTypeCreateInput, FishTypeUncheckedCreateInput>
  }

  /**
   * FishType createMany
   */
  export type FishTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FishTypes.
     */
    data: FishTypeCreateManyInput | FishTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FishType createManyAndReturn
   */
  export type FishTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FishTypes.
     */
    data: FishTypeCreateManyInput | FishTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FishType update
   */
  export type FishTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a FishType.
     */
    data: XOR<FishTypeUpdateInput, FishTypeUncheckedUpdateInput>
    /**
     * Choose, which FishType to update.
     */
    where: FishTypeWhereUniqueInput
  }

  /**
   * FishType updateMany
   */
  export type FishTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FishTypes.
     */
    data: XOR<FishTypeUpdateManyMutationInput, FishTypeUncheckedUpdateManyInput>
    /**
     * Filter which FishTypes to update
     */
    where?: FishTypeWhereInput
  }

  /**
   * FishType upsert
   */
  export type FishTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the FishType to update in case it exists.
     */
    where: FishTypeWhereUniqueInput
    /**
     * In case the FishType found by the `where` argument doesn't exist, create a new FishType with this data.
     */
    create: XOR<FishTypeCreateInput, FishTypeUncheckedCreateInput>
    /**
     * In case the FishType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FishTypeUpdateInput, FishTypeUncheckedUpdateInput>
  }

  /**
   * FishType delete
   */
  export type FishTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
    /**
     * Filter which FishType to delete.
     */
    where: FishTypeWhereUniqueInput
  }

  /**
   * FishType deleteMany
   */
  export type FishTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishTypes to delete
     */
    where?: FishTypeWhereInput
  }

  /**
   * FishType.fishCatches
   */
  export type FishType$fishCatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    where?: FishCatchWhereInput
    orderBy?: FishCatchOrderByWithRelationInput | FishCatchOrderByWithRelationInput[]
    cursor?: FishCatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FishCatchScalarFieldEnum | FishCatchScalarFieldEnum[]
  }

  /**
   * FishType without action
   */
  export type FishTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishType
     */
    select?: FishTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishTypeInclude<ExtArgs> | null
  }


  /**
   * Model FishCatch
   */

  export type AggregateFishCatch = {
    _count: FishCatchCountAggregateOutputType | null
    _avg: FishCatchAvgAggregateOutputType | null
    _sum: FishCatchSumAggregateOutputType | null
    _min: FishCatchMinAggregateOutputType | null
    _max: FishCatchMaxAggregateOutputType | null
  }

  export type FishCatchAvgAggregateOutputType = {
    id: number | null
    bankVisitId: number | null
    fishTypeId: number | null
    weight: number | null
  }

  export type FishCatchSumAggregateOutputType = {
    id: number | null
    bankVisitId: number | null
    fishTypeId: number | null
    weight: number | null
  }

  export type FishCatchMinAggregateOutputType = {
    id: number | null
    bankVisitId: number | null
    fishTypeId: number | null
    weight: number | null
    quality: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishCatchMaxAggregateOutputType = {
    id: number | null
    bankVisitId: number | null
    fishTypeId: number | null
    weight: number | null
    quality: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FishCatchCountAggregateOutputType = {
    id: number
    bankVisitId: number
    fishTypeId: number
    weight: number
    quality: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FishCatchAvgAggregateInputType = {
    id?: true
    bankVisitId?: true
    fishTypeId?: true
    weight?: true
  }

  export type FishCatchSumAggregateInputType = {
    id?: true
    bankVisitId?: true
    fishTypeId?: true
    weight?: true
  }

  export type FishCatchMinAggregateInputType = {
    id?: true
    bankVisitId?: true
    fishTypeId?: true
    weight?: true
    quality?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishCatchMaxAggregateInputType = {
    id?: true
    bankVisitId?: true
    fishTypeId?: true
    weight?: true
    quality?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FishCatchCountAggregateInputType = {
    id?: true
    bankVisitId?: true
    fishTypeId?: true
    weight?: true
    quality?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FishCatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishCatch to aggregate.
     */
    where?: FishCatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishCatches to fetch.
     */
    orderBy?: FishCatchOrderByWithRelationInput | FishCatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FishCatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishCatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishCatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FishCatches
    **/
    _count?: true | FishCatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FishCatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FishCatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FishCatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FishCatchMaxAggregateInputType
  }

  export type GetFishCatchAggregateType<T extends FishCatchAggregateArgs> = {
        [P in keyof T & keyof AggregateFishCatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFishCatch[P]>
      : GetScalarType<T[P], AggregateFishCatch[P]>
  }




  export type FishCatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FishCatchWhereInput
    orderBy?: FishCatchOrderByWithAggregationInput | FishCatchOrderByWithAggregationInput[]
    by: FishCatchScalarFieldEnum[] | FishCatchScalarFieldEnum
    having?: FishCatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FishCatchCountAggregateInputType | true
    _avg?: FishCatchAvgAggregateInputType
    _sum?: FishCatchSumAggregateInputType
    _min?: FishCatchMinAggregateInputType
    _max?: FishCatchMaxAggregateInputType
  }

  export type FishCatchGroupByOutputType = {
    id: number
    bankVisitId: number
    fishTypeId: number
    weight: number
    quality: string
    createdAt: Date
    updatedAt: Date
    _count: FishCatchCountAggregateOutputType | null
    _avg: FishCatchAvgAggregateOutputType | null
    _sum: FishCatchSumAggregateOutputType | null
    _min: FishCatchMinAggregateOutputType | null
    _max: FishCatchMaxAggregateOutputType | null
  }

  type GetFishCatchGroupByPayload<T extends FishCatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FishCatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FishCatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FishCatchGroupByOutputType[P]>
            : GetScalarType<T[P], FishCatchGroupByOutputType[P]>
        }
      >
    >


  export type FishCatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bankVisitId?: boolean
    fishTypeId?: boolean
    weight?: boolean
    quality?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bankVisit?: boolean | BankVisitDefaultArgs<ExtArgs>
    fishType?: boolean | FishTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fishCatch"]>

  export type FishCatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bankVisitId?: boolean
    fishTypeId?: boolean
    weight?: boolean
    quality?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bankVisit?: boolean | BankVisitDefaultArgs<ExtArgs>
    fishType?: boolean | FishTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fishCatch"]>

  export type FishCatchSelectScalar = {
    id?: boolean
    bankVisitId?: boolean
    fishTypeId?: boolean
    weight?: boolean
    quality?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FishCatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankVisit?: boolean | BankVisitDefaultArgs<ExtArgs>
    fishType?: boolean | FishTypeDefaultArgs<ExtArgs>
  }
  export type FishCatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankVisit?: boolean | BankVisitDefaultArgs<ExtArgs>
    fishType?: boolean | FishTypeDefaultArgs<ExtArgs>
  }

  export type $FishCatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FishCatch"
    objects: {
      bankVisit: Prisma.$BankVisitPayload<ExtArgs>
      fishType: Prisma.$FishTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bankVisitId: number
      fishTypeId: number
      weight: number
      quality: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fishCatch"]>
    composites: {}
  }

  type FishCatchGetPayload<S extends boolean | null | undefined | FishCatchDefaultArgs> = $Result.GetResult<Prisma.$FishCatchPayload, S>

  type FishCatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FishCatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FishCatchCountAggregateInputType | true
    }

  export interface FishCatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FishCatch'], meta: { name: 'FishCatch' } }
    /**
     * Find zero or one FishCatch that matches the filter.
     * @param {FishCatchFindUniqueArgs} args - Arguments to find a FishCatch
     * @example
     * // Get one FishCatch
     * const fishCatch = await prisma.fishCatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FishCatchFindUniqueArgs>(args: SelectSubset<T, FishCatchFindUniqueArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FishCatch that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FishCatchFindUniqueOrThrowArgs} args - Arguments to find a FishCatch
     * @example
     * // Get one FishCatch
     * const fishCatch = await prisma.fishCatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FishCatchFindUniqueOrThrowArgs>(args: SelectSubset<T, FishCatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FishCatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishCatchFindFirstArgs} args - Arguments to find a FishCatch
     * @example
     * // Get one FishCatch
     * const fishCatch = await prisma.fishCatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FishCatchFindFirstArgs>(args?: SelectSubset<T, FishCatchFindFirstArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FishCatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishCatchFindFirstOrThrowArgs} args - Arguments to find a FishCatch
     * @example
     * // Get one FishCatch
     * const fishCatch = await prisma.fishCatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FishCatchFindFirstOrThrowArgs>(args?: SelectSubset<T, FishCatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FishCatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishCatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FishCatches
     * const fishCatches = await prisma.fishCatch.findMany()
     * 
     * // Get first 10 FishCatches
     * const fishCatches = await prisma.fishCatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fishCatchWithIdOnly = await prisma.fishCatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FishCatchFindManyArgs>(args?: SelectSubset<T, FishCatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FishCatch.
     * @param {FishCatchCreateArgs} args - Arguments to create a FishCatch.
     * @example
     * // Create one FishCatch
     * const FishCatch = await prisma.fishCatch.create({
     *   data: {
     *     // ... data to create a FishCatch
     *   }
     * })
     * 
     */
    create<T extends FishCatchCreateArgs>(args: SelectSubset<T, FishCatchCreateArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FishCatches.
     * @param {FishCatchCreateManyArgs} args - Arguments to create many FishCatches.
     * @example
     * // Create many FishCatches
     * const fishCatch = await prisma.fishCatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FishCatchCreateManyArgs>(args?: SelectSubset<T, FishCatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FishCatches and returns the data saved in the database.
     * @param {FishCatchCreateManyAndReturnArgs} args - Arguments to create many FishCatches.
     * @example
     * // Create many FishCatches
     * const fishCatch = await prisma.fishCatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FishCatches and only return the `id`
     * const fishCatchWithIdOnly = await prisma.fishCatch.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FishCatchCreateManyAndReturnArgs>(args?: SelectSubset<T, FishCatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FishCatch.
     * @param {FishCatchDeleteArgs} args - Arguments to delete one FishCatch.
     * @example
     * // Delete one FishCatch
     * const FishCatch = await prisma.fishCatch.delete({
     *   where: {
     *     // ... filter to delete one FishCatch
     *   }
     * })
     * 
     */
    delete<T extends FishCatchDeleteArgs>(args: SelectSubset<T, FishCatchDeleteArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FishCatch.
     * @param {FishCatchUpdateArgs} args - Arguments to update one FishCatch.
     * @example
     * // Update one FishCatch
     * const fishCatch = await prisma.fishCatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FishCatchUpdateArgs>(args: SelectSubset<T, FishCatchUpdateArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FishCatches.
     * @param {FishCatchDeleteManyArgs} args - Arguments to filter FishCatches to delete.
     * @example
     * // Delete a few FishCatches
     * const { count } = await prisma.fishCatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FishCatchDeleteManyArgs>(args?: SelectSubset<T, FishCatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FishCatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishCatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FishCatches
     * const fishCatch = await prisma.fishCatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FishCatchUpdateManyArgs>(args: SelectSubset<T, FishCatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FishCatch.
     * @param {FishCatchUpsertArgs} args - Arguments to update or create a FishCatch.
     * @example
     * // Update or create a FishCatch
     * const fishCatch = await prisma.fishCatch.upsert({
     *   create: {
     *     // ... data to create a FishCatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FishCatch we want to update
     *   }
     * })
     */
    upsert<T extends FishCatchUpsertArgs>(args: SelectSubset<T, FishCatchUpsertArgs<ExtArgs>>): Prisma__FishCatchClient<$Result.GetResult<Prisma.$FishCatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FishCatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishCatchCountArgs} args - Arguments to filter FishCatches to count.
     * @example
     * // Count the number of FishCatches
     * const count = await prisma.fishCatch.count({
     *   where: {
     *     // ... the filter for the FishCatches we want to count
     *   }
     * })
    **/
    count<T extends FishCatchCountArgs>(
      args?: Subset<T, FishCatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FishCatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FishCatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishCatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FishCatchAggregateArgs>(args: Subset<T, FishCatchAggregateArgs>): Prisma.PrismaPromise<GetFishCatchAggregateType<T>>

    /**
     * Group by FishCatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FishCatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FishCatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FishCatchGroupByArgs['orderBy'] }
        : { orderBy?: FishCatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FishCatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFishCatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FishCatch model
   */
  readonly fields: FishCatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FishCatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FishCatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bankVisit<T extends BankVisitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BankVisitDefaultArgs<ExtArgs>>): Prisma__BankVisitClient<$Result.GetResult<Prisma.$BankVisitPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fishType<T extends FishTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FishTypeDefaultArgs<ExtArgs>>): Prisma__FishTypeClient<$Result.GetResult<Prisma.$FishTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FishCatch model
   */ 
  interface FishCatchFieldRefs {
    readonly id: FieldRef<"FishCatch", 'Int'>
    readonly bankVisitId: FieldRef<"FishCatch", 'Int'>
    readonly fishTypeId: FieldRef<"FishCatch", 'Int'>
    readonly weight: FieldRef<"FishCatch", 'Float'>
    readonly quality: FieldRef<"FishCatch", 'String'>
    readonly createdAt: FieldRef<"FishCatch", 'DateTime'>
    readonly updatedAt: FieldRef<"FishCatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FishCatch findUnique
   */
  export type FishCatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * Filter, which FishCatch to fetch.
     */
    where: FishCatchWhereUniqueInput
  }

  /**
   * FishCatch findUniqueOrThrow
   */
  export type FishCatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * Filter, which FishCatch to fetch.
     */
    where: FishCatchWhereUniqueInput
  }

  /**
   * FishCatch findFirst
   */
  export type FishCatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * Filter, which FishCatch to fetch.
     */
    where?: FishCatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishCatches to fetch.
     */
    orderBy?: FishCatchOrderByWithRelationInput | FishCatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishCatches.
     */
    cursor?: FishCatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishCatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishCatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishCatches.
     */
    distinct?: FishCatchScalarFieldEnum | FishCatchScalarFieldEnum[]
  }

  /**
   * FishCatch findFirstOrThrow
   */
  export type FishCatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * Filter, which FishCatch to fetch.
     */
    where?: FishCatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishCatches to fetch.
     */
    orderBy?: FishCatchOrderByWithRelationInput | FishCatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FishCatches.
     */
    cursor?: FishCatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishCatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishCatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FishCatches.
     */
    distinct?: FishCatchScalarFieldEnum | FishCatchScalarFieldEnum[]
  }

  /**
   * FishCatch findMany
   */
  export type FishCatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * Filter, which FishCatches to fetch.
     */
    where?: FishCatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FishCatches to fetch.
     */
    orderBy?: FishCatchOrderByWithRelationInput | FishCatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FishCatches.
     */
    cursor?: FishCatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FishCatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FishCatches.
     */
    skip?: number
    distinct?: FishCatchScalarFieldEnum | FishCatchScalarFieldEnum[]
  }

  /**
   * FishCatch create
   */
  export type FishCatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * The data needed to create a FishCatch.
     */
    data: XOR<FishCatchCreateInput, FishCatchUncheckedCreateInput>
  }

  /**
   * FishCatch createMany
   */
  export type FishCatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FishCatches.
     */
    data: FishCatchCreateManyInput | FishCatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FishCatch createManyAndReturn
   */
  export type FishCatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FishCatches.
     */
    data: FishCatchCreateManyInput | FishCatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FishCatch update
   */
  export type FishCatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * The data needed to update a FishCatch.
     */
    data: XOR<FishCatchUpdateInput, FishCatchUncheckedUpdateInput>
    /**
     * Choose, which FishCatch to update.
     */
    where: FishCatchWhereUniqueInput
  }

  /**
   * FishCatch updateMany
   */
  export type FishCatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FishCatches.
     */
    data: XOR<FishCatchUpdateManyMutationInput, FishCatchUncheckedUpdateManyInput>
    /**
     * Filter which FishCatches to update
     */
    where?: FishCatchWhereInput
  }

  /**
   * FishCatch upsert
   */
  export type FishCatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * The filter to search for the FishCatch to update in case it exists.
     */
    where: FishCatchWhereUniqueInput
    /**
     * In case the FishCatch found by the `where` argument doesn't exist, create a new FishCatch with this data.
     */
    create: XOR<FishCatchCreateInput, FishCatchUncheckedCreateInput>
    /**
     * In case the FishCatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FishCatchUpdateInput, FishCatchUncheckedUpdateInput>
  }

  /**
   * FishCatch delete
   */
  export type FishCatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
    /**
     * Filter which FishCatch to delete.
     */
    where: FishCatchWhereUniqueInput
  }

  /**
   * FishCatch deleteMany
   */
  export type FishCatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FishCatches to delete
     */
    where?: FishCatchWhereInput
  }

  /**
   * FishCatch without action
   */
  export type FishCatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FishCatch
     */
    select?: FishCatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FishCatchInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BoatScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    displacement: 'displacement',
    buildDate: 'buildDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BoatScalarFieldEnum = (typeof BoatScalarFieldEnum)[keyof typeof BoatScalarFieldEnum]


  export const CrewMemberScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    position: 'position',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CrewMemberScalarFieldEnum = (typeof CrewMemberScalarFieldEnum)[keyof typeof CrewMemberScalarFieldEnum]


  export const FishingTripScalarFieldEnum: {
    id: 'id',
    boatId: 'boatId',
    departureDate: 'departureDate',
    returnDate: 'returnDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FishingTripScalarFieldEnum = (typeof FishingTripScalarFieldEnum)[keyof typeof FishingTripScalarFieldEnum]


  export const FishingBankScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FishingBankScalarFieldEnum = (typeof FishingBankScalarFieldEnum)[keyof typeof FishingBankScalarFieldEnum]


  export const BankVisitScalarFieldEnum: {
    id: 'id',
    fishingTripId: 'fishingTripId',
    fishingBankId: 'fishingBankId',
    arrivalDate: 'arrivalDate',
    departureDate: 'departureDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BankVisitScalarFieldEnum = (typeof BankVisitScalarFieldEnum)[keyof typeof BankVisitScalarFieldEnum]


  export const FishTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FishTypeScalarFieldEnum = (typeof FishTypeScalarFieldEnum)[keyof typeof FishTypeScalarFieldEnum]


  export const FishCatchScalarFieldEnum: {
    id: 'id',
    bankVisitId: 'bankVisitId',
    fishTypeId: 'fishTypeId',
    weight: 'weight',
    quality: 'quality',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FishCatchScalarFieldEnum = (typeof FishCatchScalarFieldEnum)[keyof typeof FishCatchScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type BoatWhereInput = {
    AND?: BoatWhereInput | BoatWhereInput[]
    OR?: BoatWhereInput[]
    NOT?: BoatWhereInput | BoatWhereInput[]
    id?: IntFilter<"Boat"> | number
    name?: StringFilter<"Boat"> | string
    type?: StringFilter<"Boat"> | string
    displacement?: FloatFilter<"Boat"> | number
    buildDate?: DateTimeFilter<"Boat"> | Date | string
    createdAt?: DateTimeFilter<"Boat"> | Date | string
    updatedAt?: DateTimeFilter<"Boat"> | Date | string
    fishingTrips?: FishingTripListRelationFilter
  }

  export type BoatOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    displacement?: SortOrder
    buildDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fishingTrips?: FishingTripOrderByRelationAggregateInput
  }

  export type BoatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BoatWhereInput | BoatWhereInput[]
    OR?: BoatWhereInput[]
    NOT?: BoatWhereInput | BoatWhereInput[]
    name?: StringFilter<"Boat"> | string
    type?: StringFilter<"Boat"> | string
    displacement?: FloatFilter<"Boat"> | number
    buildDate?: DateTimeFilter<"Boat"> | Date | string
    createdAt?: DateTimeFilter<"Boat"> | Date | string
    updatedAt?: DateTimeFilter<"Boat"> | Date | string
    fishingTrips?: FishingTripListRelationFilter
  }, "id">

  export type BoatOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    displacement?: SortOrder
    buildDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BoatCountOrderByAggregateInput
    _avg?: BoatAvgOrderByAggregateInput
    _max?: BoatMaxOrderByAggregateInput
    _min?: BoatMinOrderByAggregateInput
    _sum?: BoatSumOrderByAggregateInput
  }

  export type BoatScalarWhereWithAggregatesInput = {
    AND?: BoatScalarWhereWithAggregatesInput | BoatScalarWhereWithAggregatesInput[]
    OR?: BoatScalarWhereWithAggregatesInput[]
    NOT?: BoatScalarWhereWithAggregatesInput | BoatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Boat"> | number
    name?: StringWithAggregatesFilter<"Boat"> | string
    type?: StringWithAggregatesFilter<"Boat"> | string
    displacement?: FloatWithAggregatesFilter<"Boat"> | number
    buildDate?: DateTimeWithAggregatesFilter<"Boat"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Boat"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Boat"> | Date | string
  }

  export type CrewMemberWhereInput = {
    AND?: CrewMemberWhereInput | CrewMemberWhereInput[]
    OR?: CrewMemberWhereInput[]
    NOT?: CrewMemberWhereInput | CrewMemberWhereInput[]
    id?: IntFilter<"CrewMember"> | number
    name?: StringFilter<"CrewMember"> | string
    address?: StringFilter<"CrewMember"> | string
    position?: StringFilter<"CrewMember"> | string
    createdAt?: DateTimeFilter<"CrewMember"> | Date | string
    updatedAt?: DateTimeFilter<"CrewMember"> | Date | string
    fishingTrips?: FishingTripListRelationFilter
  }

  export type CrewMemberOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fishingTrips?: FishingTripOrderByRelationAggregateInput
  }

  export type CrewMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CrewMemberWhereInput | CrewMemberWhereInput[]
    OR?: CrewMemberWhereInput[]
    NOT?: CrewMemberWhereInput | CrewMemberWhereInput[]
    name?: StringFilter<"CrewMember"> | string
    address?: StringFilter<"CrewMember"> | string
    position?: StringFilter<"CrewMember"> | string
    createdAt?: DateTimeFilter<"CrewMember"> | Date | string
    updatedAt?: DateTimeFilter<"CrewMember"> | Date | string
    fishingTrips?: FishingTripListRelationFilter
  }, "id">

  export type CrewMemberOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CrewMemberCountOrderByAggregateInput
    _avg?: CrewMemberAvgOrderByAggregateInput
    _max?: CrewMemberMaxOrderByAggregateInput
    _min?: CrewMemberMinOrderByAggregateInput
    _sum?: CrewMemberSumOrderByAggregateInput
  }

  export type CrewMemberScalarWhereWithAggregatesInput = {
    AND?: CrewMemberScalarWhereWithAggregatesInput | CrewMemberScalarWhereWithAggregatesInput[]
    OR?: CrewMemberScalarWhereWithAggregatesInput[]
    NOT?: CrewMemberScalarWhereWithAggregatesInput | CrewMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CrewMember"> | number
    name?: StringWithAggregatesFilter<"CrewMember"> | string
    address?: StringWithAggregatesFilter<"CrewMember"> | string
    position?: StringWithAggregatesFilter<"CrewMember"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CrewMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CrewMember"> | Date | string
  }

  export type FishingTripWhereInput = {
    AND?: FishingTripWhereInput | FishingTripWhereInput[]
    OR?: FishingTripWhereInput[]
    NOT?: FishingTripWhereInput | FishingTripWhereInput[]
    id?: IntFilter<"FishingTrip"> | number
    boatId?: IntFilter<"FishingTrip"> | number
    departureDate?: DateTimeFilter<"FishingTrip"> | Date | string
    returnDate?: DateTimeFilter<"FishingTrip"> | Date | string
    createdAt?: DateTimeFilter<"FishingTrip"> | Date | string
    updatedAt?: DateTimeFilter<"FishingTrip"> | Date | string
    boat?: XOR<BoatRelationFilter, BoatWhereInput>
    crewMembers?: CrewMemberListRelationFilter
    bankVisits?: BankVisitListRelationFilter
  }

  export type FishingTripOrderByWithRelationInput = {
    id?: SortOrder
    boatId?: SortOrder
    departureDate?: SortOrder
    returnDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    boat?: BoatOrderByWithRelationInput
    crewMembers?: CrewMemberOrderByRelationAggregateInput
    bankVisits?: BankVisitOrderByRelationAggregateInput
  }

  export type FishingTripWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FishingTripWhereInput | FishingTripWhereInput[]
    OR?: FishingTripWhereInput[]
    NOT?: FishingTripWhereInput | FishingTripWhereInput[]
    boatId?: IntFilter<"FishingTrip"> | number
    departureDate?: DateTimeFilter<"FishingTrip"> | Date | string
    returnDate?: DateTimeFilter<"FishingTrip"> | Date | string
    createdAt?: DateTimeFilter<"FishingTrip"> | Date | string
    updatedAt?: DateTimeFilter<"FishingTrip"> | Date | string
    boat?: XOR<BoatRelationFilter, BoatWhereInput>
    crewMembers?: CrewMemberListRelationFilter
    bankVisits?: BankVisitListRelationFilter
  }, "id">

  export type FishingTripOrderByWithAggregationInput = {
    id?: SortOrder
    boatId?: SortOrder
    departureDate?: SortOrder
    returnDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FishingTripCountOrderByAggregateInput
    _avg?: FishingTripAvgOrderByAggregateInput
    _max?: FishingTripMaxOrderByAggregateInput
    _min?: FishingTripMinOrderByAggregateInput
    _sum?: FishingTripSumOrderByAggregateInput
  }

  export type FishingTripScalarWhereWithAggregatesInput = {
    AND?: FishingTripScalarWhereWithAggregatesInput | FishingTripScalarWhereWithAggregatesInput[]
    OR?: FishingTripScalarWhereWithAggregatesInput[]
    NOT?: FishingTripScalarWhereWithAggregatesInput | FishingTripScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FishingTrip"> | number
    boatId?: IntWithAggregatesFilter<"FishingTrip"> | number
    departureDate?: DateTimeWithAggregatesFilter<"FishingTrip"> | Date | string
    returnDate?: DateTimeWithAggregatesFilter<"FishingTrip"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"FishingTrip"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FishingTrip"> | Date | string
  }

  export type FishingBankWhereInput = {
    AND?: FishingBankWhereInput | FishingBankWhereInput[]
    OR?: FishingBankWhereInput[]
    NOT?: FishingBankWhereInput | FishingBankWhereInput[]
    id?: IntFilter<"FishingBank"> | number
    name?: StringFilter<"FishingBank"> | string
    location?: StringFilter<"FishingBank"> | string
    description?: StringNullableFilter<"FishingBank"> | string | null
    createdAt?: DateTimeFilter<"FishingBank"> | Date | string
    updatedAt?: DateTimeFilter<"FishingBank"> | Date | string
    bankVisits?: BankVisitListRelationFilter
  }

  export type FishingBankOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bankVisits?: BankVisitOrderByRelationAggregateInput
  }

  export type FishingBankWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FishingBankWhereInput | FishingBankWhereInput[]
    OR?: FishingBankWhereInput[]
    NOT?: FishingBankWhereInput | FishingBankWhereInput[]
    name?: StringFilter<"FishingBank"> | string
    location?: StringFilter<"FishingBank"> | string
    description?: StringNullableFilter<"FishingBank"> | string | null
    createdAt?: DateTimeFilter<"FishingBank"> | Date | string
    updatedAt?: DateTimeFilter<"FishingBank"> | Date | string
    bankVisits?: BankVisitListRelationFilter
  }, "id">

  export type FishingBankOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FishingBankCountOrderByAggregateInput
    _avg?: FishingBankAvgOrderByAggregateInput
    _max?: FishingBankMaxOrderByAggregateInput
    _min?: FishingBankMinOrderByAggregateInput
    _sum?: FishingBankSumOrderByAggregateInput
  }

  export type FishingBankScalarWhereWithAggregatesInput = {
    AND?: FishingBankScalarWhereWithAggregatesInput | FishingBankScalarWhereWithAggregatesInput[]
    OR?: FishingBankScalarWhereWithAggregatesInput[]
    NOT?: FishingBankScalarWhereWithAggregatesInput | FishingBankScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FishingBank"> | number
    name?: StringWithAggregatesFilter<"FishingBank"> | string
    location?: StringWithAggregatesFilter<"FishingBank"> | string
    description?: StringNullableWithAggregatesFilter<"FishingBank"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FishingBank"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FishingBank"> | Date | string
  }

  export type BankVisitWhereInput = {
    AND?: BankVisitWhereInput | BankVisitWhereInput[]
    OR?: BankVisitWhereInput[]
    NOT?: BankVisitWhereInput | BankVisitWhereInput[]
    id?: IntFilter<"BankVisit"> | number
    fishingTripId?: IntFilter<"BankVisit"> | number
    fishingBankId?: IntFilter<"BankVisit"> | number
    arrivalDate?: DateTimeFilter<"BankVisit"> | Date | string
    departureDate?: DateTimeFilter<"BankVisit"> | Date | string
    createdAt?: DateTimeFilter<"BankVisit"> | Date | string
    updatedAt?: DateTimeFilter<"BankVisit"> | Date | string
    fishingTrip?: XOR<FishingTripRelationFilter, FishingTripWhereInput>
    fishingBank?: XOR<FishingBankRelationFilter, FishingBankWhereInput>
    fishCatches?: FishCatchListRelationFilter
  }

  export type BankVisitOrderByWithRelationInput = {
    id?: SortOrder
    fishingTripId?: SortOrder
    fishingBankId?: SortOrder
    arrivalDate?: SortOrder
    departureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fishingTrip?: FishingTripOrderByWithRelationInput
    fishingBank?: FishingBankOrderByWithRelationInput
    fishCatches?: FishCatchOrderByRelationAggregateInput
  }

  export type BankVisitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BankVisitWhereInput | BankVisitWhereInput[]
    OR?: BankVisitWhereInput[]
    NOT?: BankVisitWhereInput | BankVisitWhereInput[]
    fishingTripId?: IntFilter<"BankVisit"> | number
    fishingBankId?: IntFilter<"BankVisit"> | number
    arrivalDate?: DateTimeFilter<"BankVisit"> | Date | string
    departureDate?: DateTimeFilter<"BankVisit"> | Date | string
    createdAt?: DateTimeFilter<"BankVisit"> | Date | string
    updatedAt?: DateTimeFilter<"BankVisit"> | Date | string
    fishingTrip?: XOR<FishingTripRelationFilter, FishingTripWhereInput>
    fishingBank?: XOR<FishingBankRelationFilter, FishingBankWhereInput>
    fishCatches?: FishCatchListRelationFilter
  }, "id">

  export type BankVisitOrderByWithAggregationInput = {
    id?: SortOrder
    fishingTripId?: SortOrder
    fishingBankId?: SortOrder
    arrivalDate?: SortOrder
    departureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BankVisitCountOrderByAggregateInput
    _avg?: BankVisitAvgOrderByAggregateInput
    _max?: BankVisitMaxOrderByAggregateInput
    _min?: BankVisitMinOrderByAggregateInput
    _sum?: BankVisitSumOrderByAggregateInput
  }

  export type BankVisitScalarWhereWithAggregatesInput = {
    AND?: BankVisitScalarWhereWithAggregatesInput | BankVisitScalarWhereWithAggregatesInput[]
    OR?: BankVisitScalarWhereWithAggregatesInput[]
    NOT?: BankVisitScalarWhereWithAggregatesInput | BankVisitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BankVisit"> | number
    fishingTripId?: IntWithAggregatesFilter<"BankVisit"> | number
    fishingBankId?: IntWithAggregatesFilter<"BankVisit"> | number
    arrivalDate?: DateTimeWithAggregatesFilter<"BankVisit"> | Date | string
    departureDate?: DateTimeWithAggregatesFilter<"BankVisit"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"BankVisit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BankVisit"> | Date | string
  }

  export type FishTypeWhereInput = {
    AND?: FishTypeWhereInput | FishTypeWhereInput[]
    OR?: FishTypeWhereInput[]
    NOT?: FishTypeWhereInput | FishTypeWhereInput[]
    id?: IntFilter<"FishType"> | number
    name?: StringFilter<"FishType"> | string
    createdAt?: DateTimeFilter<"FishType"> | Date | string
    updatedAt?: DateTimeFilter<"FishType"> | Date | string
    fishCatches?: FishCatchListRelationFilter
  }

  export type FishTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fishCatches?: FishCatchOrderByRelationAggregateInput
  }

  export type FishTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: FishTypeWhereInput | FishTypeWhereInput[]
    OR?: FishTypeWhereInput[]
    NOT?: FishTypeWhereInput | FishTypeWhereInput[]
    createdAt?: DateTimeFilter<"FishType"> | Date | string
    updatedAt?: DateTimeFilter<"FishType"> | Date | string
    fishCatches?: FishCatchListRelationFilter
  }, "id" | "name">

  export type FishTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FishTypeCountOrderByAggregateInput
    _avg?: FishTypeAvgOrderByAggregateInput
    _max?: FishTypeMaxOrderByAggregateInput
    _min?: FishTypeMinOrderByAggregateInput
    _sum?: FishTypeSumOrderByAggregateInput
  }

  export type FishTypeScalarWhereWithAggregatesInput = {
    AND?: FishTypeScalarWhereWithAggregatesInput | FishTypeScalarWhereWithAggregatesInput[]
    OR?: FishTypeScalarWhereWithAggregatesInput[]
    NOT?: FishTypeScalarWhereWithAggregatesInput | FishTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FishType"> | number
    name?: StringWithAggregatesFilter<"FishType"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FishType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FishType"> | Date | string
  }

  export type FishCatchWhereInput = {
    AND?: FishCatchWhereInput | FishCatchWhereInput[]
    OR?: FishCatchWhereInput[]
    NOT?: FishCatchWhereInput | FishCatchWhereInput[]
    id?: IntFilter<"FishCatch"> | number
    bankVisitId?: IntFilter<"FishCatch"> | number
    fishTypeId?: IntFilter<"FishCatch"> | number
    weight?: FloatFilter<"FishCatch"> | number
    quality?: StringFilter<"FishCatch"> | string
    createdAt?: DateTimeFilter<"FishCatch"> | Date | string
    updatedAt?: DateTimeFilter<"FishCatch"> | Date | string
    bankVisit?: XOR<BankVisitRelationFilter, BankVisitWhereInput>
    fishType?: XOR<FishTypeRelationFilter, FishTypeWhereInput>
  }

  export type FishCatchOrderByWithRelationInput = {
    id?: SortOrder
    bankVisitId?: SortOrder
    fishTypeId?: SortOrder
    weight?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bankVisit?: BankVisitOrderByWithRelationInput
    fishType?: FishTypeOrderByWithRelationInput
  }

  export type FishCatchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FishCatchWhereInput | FishCatchWhereInput[]
    OR?: FishCatchWhereInput[]
    NOT?: FishCatchWhereInput | FishCatchWhereInput[]
    bankVisitId?: IntFilter<"FishCatch"> | number
    fishTypeId?: IntFilter<"FishCatch"> | number
    weight?: FloatFilter<"FishCatch"> | number
    quality?: StringFilter<"FishCatch"> | string
    createdAt?: DateTimeFilter<"FishCatch"> | Date | string
    updatedAt?: DateTimeFilter<"FishCatch"> | Date | string
    bankVisit?: XOR<BankVisitRelationFilter, BankVisitWhereInput>
    fishType?: XOR<FishTypeRelationFilter, FishTypeWhereInput>
  }, "id">

  export type FishCatchOrderByWithAggregationInput = {
    id?: SortOrder
    bankVisitId?: SortOrder
    fishTypeId?: SortOrder
    weight?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FishCatchCountOrderByAggregateInput
    _avg?: FishCatchAvgOrderByAggregateInput
    _max?: FishCatchMaxOrderByAggregateInput
    _min?: FishCatchMinOrderByAggregateInput
    _sum?: FishCatchSumOrderByAggregateInput
  }

  export type FishCatchScalarWhereWithAggregatesInput = {
    AND?: FishCatchScalarWhereWithAggregatesInput | FishCatchScalarWhereWithAggregatesInput[]
    OR?: FishCatchScalarWhereWithAggregatesInput[]
    NOT?: FishCatchScalarWhereWithAggregatesInput | FishCatchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FishCatch"> | number
    bankVisitId?: IntWithAggregatesFilter<"FishCatch"> | number
    fishTypeId?: IntWithAggregatesFilter<"FishCatch"> | number
    weight?: FloatWithAggregatesFilter<"FishCatch"> | number
    quality?: StringWithAggregatesFilter<"FishCatch"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FishCatch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FishCatch"> | Date | string
  }

  export type BoatCreateInput = {
    name: string
    type: string
    displacement: number
    buildDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingTrips?: FishingTripCreateNestedManyWithoutBoatInput
  }

  export type BoatUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    displacement: number
    buildDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingTrips?: FishingTripUncheckedCreateNestedManyWithoutBoatInput
  }

  export type BoatUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displacement?: FloatFieldUpdateOperationsInput | number
    buildDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingTrips?: FishingTripUpdateManyWithoutBoatNestedInput
  }

  export type BoatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displacement?: FloatFieldUpdateOperationsInput | number
    buildDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingTrips?: FishingTripUncheckedUpdateManyWithoutBoatNestedInput
  }

  export type BoatCreateManyInput = {
    id?: number
    name: string
    type: string
    displacement: number
    buildDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoatUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displacement?: FloatFieldUpdateOperationsInput | number
    buildDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displacement?: FloatFieldUpdateOperationsInput | number
    buildDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrewMemberCreateInput = {
    name: string
    address: string
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingTrips?: FishingTripCreateNestedManyWithoutCrewMembersInput
  }

  export type CrewMemberUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingTrips?: FishingTripUncheckedCreateNestedManyWithoutCrewMembersInput
  }

  export type CrewMemberUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingTrips?: FishingTripUpdateManyWithoutCrewMembersNestedInput
  }

  export type CrewMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingTrips?: FishingTripUncheckedUpdateManyWithoutCrewMembersNestedInput
  }

  export type CrewMemberCreateManyInput = {
    id?: number
    name: string
    address: string
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CrewMemberUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrewMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishingTripCreateInput = {
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    boat: BoatCreateNestedOneWithoutFishingTripsInput
    crewMembers?: CrewMemberCreateNestedManyWithoutFishingTripsInput
    bankVisits?: BankVisitCreateNestedManyWithoutFishingTripInput
  }

  export type FishingTripUncheckedCreateInput = {
    id?: number
    boatId: number
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    crewMembers?: CrewMemberUncheckedCreateNestedManyWithoutFishingTripsInput
    bankVisits?: BankVisitUncheckedCreateNestedManyWithoutFishingTripInput
  }

  export type FishingTripUpdateInput = {
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boat?: BoatUpdateOneRequiredWithoutFishingTripsNestedInput
    crewMembers?: CrewMemberUpdateManyWithoutFishingTripsNestedInput
    bankVisits?: BankVisitUpdateManyWithoutFishingTripNestedInput
  }

  export type FishingTripUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    boatId?: IntFieldUpdateOperationsInput | number
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crewMembers?: CrewMemberUncheckedUpdateManyWithoutFishingTripsNestedInput
    bankVisits?: BankVisitUncheckedUpdateManyWithoutFishingTripNestedInput
  }

  export type FishingTripCreateManyInput = {
    id?: number
    boatId: number
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishingTripUpdateManyMutationInput = {
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishingTripUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    boatId?: IntFieldUpdateOperationsInput | number
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishingBankCreateInput = {
    name: string
    location: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bankVisits?: BankVisitCreateNestedManyWithoutFishingBankInput
  }

  export type FishingBankUncheckedCreateInput = {
    id?: number
    name: string
    location: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bankVisits?: BankVisitUncheckedCreateNestedManyWithoutFishingBankInput
  }

  export type FishingBankUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankVisits?: BankVisitUpdateManyWithoutFishingBankNestedInput
  }

  export type FishingBankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankVisits?: BankVisitUncheckedUpdateManyWithoutFishingBankNestedInput
  }

  export type FishingBankCreateManyInput = {
    id?: number
    name: string
    location: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishingBankUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishingBankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankVisitCreateInput = {
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingTrip: FishingTripCreateNestedOneWithoutBankVisitsInput
    fishingBank: FishingBankCreateNestedOneWithoutBankVisitsInput
    fishCatches?: FishCatchCreateNestedManyWithoutBankVisitInput
  }

  export type BankVisitUncheckedCreateInput = {
    id?: number
    fishingTripId: number
    fishingBankId: number
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishCatches?: FishCatchUncheckedCreateNestedManyWithoutBankVisitInput
  }

  export type BankVisitUpdateInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingTrip?: FishingTripUpdateOneRequiredWithoutBankVisitsNestedInput
    fishingBank?: FishingBankUpdateOneRequiredWithoutBankVisitsNestedInput
    fishCatches?: FishCatchUpdateManyWithoutBankVisitNestedInput
  }

  export type BankVisitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishingTripId?: IntFieldUpdateOperationsInput | number
    fishingBankId?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishCatches?: FishCatchUncheckedUpdateManyWithoutBankVisitNestedInput
  }

  export type BankVisitCreateManyInput = {
    id?: number
    fishingTripId: number
    fishingBankId: number
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankVisitUpdateManyMutationInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankVisitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishingTripId?: IntFieldUpdateOperationsInput | number
    fishingBankId?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishTypeCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishCatches?: FishCatchCreateNestedManyWithoutFishTypeInput
  }

  export type FishTypeUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishCatches?: FishCatchUncheckedCreateNestedManyWithoutFishTypeInput
  }

  export type FishTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishCatches?: FishCatchUpdateManyWithoutFishTypeNestedInput
  }

  export type FishTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishCatches?: FishCatchUncheckedUpdateManyWithoutFishTypeNestedInput
  }

  export type FishTypeCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchCreateInput = {
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bankVisit: BankVisitCreateNestedOneWithoutFishCatchesInput
    fishType: FishTypeCreateNestedOneWithoutFishCatchesInput
  }

  export type FishCatchUncheckedCreateInput = {
    id?: number
    bankVisitId: number
    fishTypeId: number
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishCatchUpdateInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankVisit?: BankVisitUpdateOneRequiredWithoutFishCatchesNestedInput
    fishType?: FishTypeUpdateOneRequiredWithoutFishCatchesNestedInput
  }

  export type FishCatchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankVisitId?: IntFieldUpdateOperationsInput | number
    fishTypeId?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchCreateManyInput = {
    id?: number
    bankVisitId: number
    fishTypeId: number
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishCatchUpdateManyMutationInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankVisitId?: IntFieldUpdateOperationsInput | number
    fishTypeId?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FishingTripListRelationFilter = {
    every?: FishingTripWhereInput
    some?: FishingTripWhereInput
    none?: FishingTripWhereInput
  }

  export type FishingTripOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoatCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    displacement?: SortOrder
    buildDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoatAvgOrderByAggregateInput = {
    id?: SortOrder
    displacement?: SortOrder
  }

  export type BoatMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    displacement?: SortOrder
    buildDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoatMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    displacement?: SortOrder
    buildDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoatSumOrderByAggregateInput = {
    id?: SortOrder
    displacement?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CrewMemberCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CrewMemberAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CrewMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CrewMemberMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CrewMemberSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoatRelationFilter = {
    is?: BoatWhereInput
    isNot?: BoatWhereInput
  }

  export type CrewMemberListRelationFilter = {
    every?: CrewMemberWhereInput
    some?: CrewMemberWhereInput
    none?: CrewMemberWhereInput
  }

  export type BankVisitListRelationFilter = {
    every?: BankVisitWhereInput
    some?: BankVisitWhereInput
    none?: BankVisitWhereInput
  }

  export type CrewMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BankVisitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FishingTripCountOrderByAggregateInput = {
    id?: SortOrder
    boatId?: SortOrder
    departureDate?: SortOrder
    returnDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishingTripAvgOrderByAggregateInput = {
    id?: SortOrder
    boatId?: SortOrder
  }

  export type FishingTripMaxOrderByAggregateInput = {
    id?: SortOrder
    boatId?: SortOrder
    departureDate?: SortOrder
    returnDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishingTripMinOrderByAggregateInput = {
    id?: SortOrder
    boatId?: SortOrder
    departureDate?: SortOrder
    returnDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishingTripSumOrderByAggregateInput = {
    id?: SortOrder
    boatId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FishingBankCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishingBankAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FishingBankMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishingBankMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishingBankSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FishingTripRelationFilter = {
    is?: FishingTripWhereInput
    isNot?: FishingTripWhereInput
  }

  export type FishingBankRelationFilter = {
    is?: FishingBankWhereInput
    isNot?: FishingBankWhereInput
  }

  export type FishCatchListRelationFilter = {
    every?: FishCatchWhereInput
    some?: FishCatchWhereInput
    none?: FishCatchWhereInput
  }

  export type FishCatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BankVisitCountOrderByAggregateInput = {
    id?: SortOrder
    fishingTripId?: SortOrder
    fishingBankId?: SortOrder
    arrivalDate?: SortOrder
    departureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankVisitAvgOrderByAggregateInput = {
    id?: SortOrder
    fishingTripId?: SortOrder
    fishingBankId?: SortOrder
  }

  export type BankVisitMaxOrderByAggregateInput = {
    id?: SortOrder
    fishingTripId?: SortOrder
    fishingBankId?: SortOrder
    arrivalDate?: SortOrder
    departureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankVisitMinOrderByAggregateInput = {
    id?: SortOrder
    fishingTripId?: SortOrder
    fishingBankId?: SortOrder
    arrivalDate?: SortOrder
    departureDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankVisitSumOrderByAggregateInput = {
    id?: SortOrder
    fishingTripId?: SortOrder
    fishingBankId?: SortOrder
  }

  export type FishTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FishTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BankVisitRelationFilter = {
    is?: BankVisitWhereInput
    isNot?: BankVisitWhereInput
  }

  export type FishTypeRelationFilter = {
    is?: FishTypeWhereInput
    isNot?: FishTypeWhereInput
  }

  export type FishCatchCountOrderByAggregateInput = {
    id?: SortOrder
    bankVisitId?: SortOrder
    fishTypeId?: SortOrder
    weight?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishCatchAvgOrderByAggregateInput = {
    id?: SortOrder
    bankVisitId?: SortOrder
    fishTypeId?: SortOrder
    weight?: SortOrder
  }

  export type FishCatchMaxOrderByAggregateInput = {
    id?: SortOrder
    bankVisitId?: SortOrder
    fishTypeId?: SortOrder
    weight?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishCatchMinOrderByAggregateInput = {
    id?: SortOrder
    bankVisitId?: SortOrder
    fishTypeId?: SortOrder
    weight?: SortOrder
    quality?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FishCatchSumOrderByAggregateInput = {
    id?: SortOrder
    bankVisitId?: SortOrder
    fishTypeId?: SortOrder
    weight?: SortOrder
  }

  export type FishingTripCreateNestedManyWithoutBoatInput = {
    create?: XOR<FishingTripCreateWithoutBoatInput, FishingTripUncheckedCreateWithoutBoatInput> | FishingTripCreateWithoutBoatInput[] | FishingTripUncheckedCreateWithoutBoatInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutBoatInput | FishingTripCreateOrConnectWithoutBoatInput[]
    createMany?: FishingTripCreateManyBoatInputEnvelope
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
  }

  export type FishingTripUncheckedCreateNestedManyWithoutBoatInput = {
    create?: XOR<FishingTripCreateWithoutBoatInput, FishingTripUncheckedCreateWithoutBoatInput> | FishingTripCreateWithoutBoatInput[] | FishingTripUncheckedCreateWithoutBoatInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutBoatInput | FishingTripCreateOrConnectWithoutBoatInput[]
    createMany?: FishingTripCreateManyBoatInputEnvelope
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FishingTripUpdateManyWithoutBoatNestedInput = {
    create?: XOR<FishingTripCreateWithoutBoatInput, FishingTripUncheckedCreateWithoutBoatInput> | FishingTripCreateWithoutBoatInput[] | FishingTripUncheckedCreateWithoutBoatInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutBoatInput | FishingTripCreateOrConnectWithoutBoatInput[]
    upsert?: FishingTripUpsertWithWhereUniqueWithoutBoatInput | FishingTripUpsertWithWhereUniqueWithoutBoatInput[]
    createMany?: FishingTripCreateManyBoatInputEnvelope
    set?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    disconnect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    delete?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    update?: FishingTripUpdateWithWhereUniqueWithoutBoatInput | FishingTripUpdateWithWhereUniqueWithoutBoatInput[]
    updateMany?: FishingTripUpdateManyWithWhereWithoutBoatInput | FishingTripUpdateManyWithWhereWithoutBoatInput[]
    deleteMany?: FishingTripScalarWhereInput | FishingTripScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FishingTripUncheckedUpdateManyWithoutBoatNestedInput = {
    create?: XOR<FishingTripCreateWithoutBoatInput, FishingTripUncheckedCreateWithoutBoatInput> | FishingTripCreateWithoutBoatInput[] | FishingTripUncheckedCreateWithoutBoatInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutBoatInput | FishingTripCreateOrConnectWithoutBoatInput[]
    upsert?: FishingTripUpsertWithWhereUniqueWithoutBoatInput | FishingTripUpsertWithWhereUniqueWithoutBoatInput[]
    createMany?: FishingTripCreateManyBoatInputEnvelope
    set?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    disconnect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    delete?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    update?: FishingTripUpdateWithWhereUniqueWithoutBoatInput | FishingTripUpdateWithWhereUniqueWithoutBoatInput[]
    updateMany?: FishingTripUpdateManyWithWhereWithoutBoatInput | FishingTripUpdateManyWithWhereWithoutBoatInput[]
    deleteMany?: FishingTripScalarWhereInput | FishingTripScalarWhereInput[]
  }

  export type FishingTripCreateNestedManyWithoutCrewMembersInput = {
    create?: XOR<FishingTripCreateWithoutCrewMembersInput, FishingTripUncheckedCreateWithoutCrewMembersInput> | FishingTripCreateWithoutCrewMembersInput[] | FishingTripUncheckedCreateWithoutCrewMembersInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutCrewMembersInput | FishingTripCreateOrConnectWithoutCrewMembersInput[]
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
  }

  export type FishingTripUncheckedCreateNestedManyWithoutCrewMembersInput = {
    create?: XOR<FishingTripCreateWithoutCrewMembersInput, FishingTripUncheckedCreateWithoutCrewMembersInput> | FishingTripCreateWithoutCrewMembersInput[] | FishingTripUncheckedCreateWithoutCrewMembersInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutCrewMembersInput | FishingTripCreateOrConnectWithoutCrewMembersInput[]
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
  }

  export type FishingTripUpdateManyWithoutCrewMembersNestedInput = {
    create?: XOR<FishingTripCreateWithoutCrewMembersInput, FishingTripUncheckedCreateWithoutCrewMembersInput> | FishingTripCreateWithoutCrewMembersInput[] | FishingTripUncheckedCreateWithoutCrewMembersInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutCrewMembersInput | FishingTripCreateOrConnectWithoutCrewMembersInput[]
    upsert?: FishingTripUpsertWithWhereUniqueWithoutCrewMembersInput | FishingTripUpsertWithWhereUniqueWithoutCrewMembersInput[]
    set?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    disconnect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    delete?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    update?: FishingTripUpdateWithWhereUniqueWithoutCrewMembersInput | FishingTripUpdateWithWhereUniqueWithoutCrewMembersInput[]
    updateMany?: FishingTripUpdateManyWithWhereWithoutCrewMembersInput | FishingTripUpdateManyWithWhereWithoutCrewMembersInput[]
    deleteMany?: FishingTripScalarWhereInput | FishingTripScalarWhereInput[]
  }

  export type FishingTripUncheckedUpdateManyWithoutCrewMembersNestedInput = {
    create?: XOR<FishingTripCreateWithoutCrewMembersInput, FishingTripUncheckedCreateWithoutCrewMembersInput> | FishingTripCreateWithoutCrewMembersInput[] | FishingTripUncheckedCreateWithoutCrewMembersInput[]
    connectOrCreate?: FishingTripCreateOrConnectWithoutCrewMembersInput | FishingTripCreateOrConnectWithoutCrewMembersInput[]
    upsert?: FishingTripUpsertWithWhereUniqueWithoutCrewMembersInput | FishingTripUpsertWithWhereUniqueWithoutCrewMembersInput[]
    set?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    disconnect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    delete?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    connect?: FishingTripWhereUniqueInput | FishingTripWhereUniqueInput[]
    update?: FishingTripUpdateWithWhereUniqueWithoutCrewMembersInput | FishingTripUpdateWithWhereUniqueWithoutCrewMembersInput[]
    updateMany?: FishingTripUpdateManyWithWhereWithoutCrewMembersInput | FishingTripUpdateManyWithWhereWithoutCrewMembersInput[]
    deleteMany?: FishingTripScalarWhereInput | FishingTripScalarWhereInput[]
  }

  export type BoatCreateNestedOneWithoutFishingTripsInput = {
    create?: XOR<BoatCreateWithoutFishingTripsInput, BoatUncheckedCreateWithoutFishingTripsInput>
    connectOrCreate?: BoatCreateOrConnectWithoutFishingTripsInput
    connect?: BoatWhereUniqueInput
  }

  export type CrewMemberCreateNestedManyWithoutFishingTripsInput = {
    create?: XOR<CrewMemberCreateWithoutFishingTripsInput, CrewMemberUncheckedCreateWithoutFishingTripsInput> | CrewMemberCreateWithoutFishingTripsInput[] | CrewMemberUncheckedCreateWithoutFishingTripsInput[]
    connectOrCreate?: CrewMemberCreateOrConnectWithoutFishingTripsInput | CrewMemberCreateOrConnectWithoutFishingTripsInput[]
    connect?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
  }

  export type BankVisitCreateNestedManyWithoutFishingTripInput = {
    create?: XOR<BankVisitCreateWithoutFishingTripInput, BankVisitUncheckedCreateWithoutFishingTripInput> | BankVisitCreateWithoutFishingTripInput[] | BankVisitUncheckedCreateWithoutFishingTripInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingTripInput | BankVisitCreateOrConnectWithoutFishingTripInput[]
    createMany?: BankVisitCreateManyFishingTripInputEnvelope
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
  }

  export type CrewMemberUncheckedCreateNestedManyWithoutFishingTripsInput = {
    create?: XOR<CrewMemberCreateWithoutFishingTripsInput, CrewMemberUncheckedCreateWithoutFishingTripsInput> | CrewMemberCreateWithoutFishingTripsInput[] | CrewMemberUncheckedCreateWithoutFishingTripsInput[]
    connectOrCreate?: CrewMemberCreateOrConnectWithoutFishingTripsInput | CrewMemberCreateOrConnectWithoutFishingTripsInput[]
    connect?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
  }

  export type BankVisitUncheckedCreateNestedManyWithoutFishingTripInput = {
    create?: XOR<BankVisitCreateWithoutFishingTripInput, BankVisitUncheckedCreateWithoutFishingTripInput> | BankVisitCreateWithoutFishingTripInput[] | BankVisitUncheckedCreateWithoutFishingTripInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingTripInput | BankVisitCreateOrConnectWithoutFishingTripInput[]
    createMany?: BankVisitCreateManyFishingTripInputEnvelope
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
  }

  export type BoatUpdateOneRequiredWithoutFishingTripsNestedInput = {
    create?: XOR<BoatCreateWithoutFishingTripsInput, BoatUncheckedCreateWithoutFishingTripsInput>
    connectOrCreate?: BoatCreateOrConnectWithoutFishingTripsInput
    upsert?: BoatUpsertWithoutFishingTripsInput
    connect?: BoatWhereUniqueInput
    update?: XOR<XOR<BoatUpdateToOneWithWhereWithoutFishingTripsInput, BoatUpdateWithoutFishingTripsInput>, BoatUncheckedUpdateWithoutFishingTripsInput>
  }

  export type CrewMemberUpdateManyWithoutFishingTripsNestedInput = {
    create?: XOR<CrewMemberCreateWithoutFishingTripsInput, CrewMemberUncheckedCreateWithoutFishingTripsInput> | CrewMemberCreateWithoutFishingTripsInput[] | CrewMemberUncheckedCreateWithoutFishingTripsInput[]
    connectOrCreate?: CrewMemberCreateOrConnectWithoutFishingTripsInput | CrewMemberCreateOrConnectWithoutFishingTripsInput[]
    upsert?: CrewMemberUpsertWithWhereUniqueWithoutFishingTripsInput | CrewMemberUpsertWithWhereUniqueWithoutFishingTripsInput[]
    set?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    disconnect?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    delete?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    connect?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    update?: CrewMemberUpdateWithWhereUniqueWithoutFishingTripsInput | CrewMemberUpdateWithWhereUniqueWithoutFishingTripsInput[]
    updateMany?: CrewMemberUpdateManyWithWhereWithoutFishingTripsInput | CrewMemberUpdateManyWithWhereWithoutFishingTripsInput[]
    deleteMany?: CrewMemberScalarWhereInput | CrewMemberScalarWhereInput[]
  }

  export type BankVisitUpdateManyWithoutFishingTripNestedInput = {
    create?: XOR<BankVisitCreateWithoutFishingTripInput, BankVisitUncheckedCreateWithoutFishingTripInput> | BankVisitCreateWithoutFishingTripInput[] | BankVisitUncheckedCreateWithoutFishingTripInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingTripInput | BankVisitCreateOrConnectWithoutFishingTripInput[]
    upsert?: BankVisitUpsertWithWhereUniqueWithoutFishingTripInput | BankVisitUpsertWithWhereUniqueWithoutFishingTripInput[]
    createMany?: BankVisitCreateManyFishingTripInputEnvelope
    set?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    disconnect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    delete?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    update?: BankVisitUpdateWithWhereUniqueWithoutFishingTripInput | BankVisitUpdateWithWhereUniqueWithoutFishingTripInput[]
    updateMany?: BankVisitUpdateManyWithWhereWithoutFishingTripInput | BankVisitUpdateManyWithWhereWithoutFishingTripInput[]
    deleteMany?: BankVisitScalarWhereInput | BankVisitScalarWhereInput[]
  }

  export type CrewMemberUncheckedUpdateManyWithoutFishingTripsNestedInput = {
    create?: XOR<CrewMemberCreateWithoutFishingTripsInput, CrewMemberUncheckedCreateWithoutFishingTripsInput> | CrewMemberCreateWithoutFishingTripsInput[] | CrewMemberUncheckedCreateWithoutFishingTripsInput[]
    connectOrCreate?: CrewMemberCreateOrConnectWithoutFishingTripsInput | CrewMemberCreateOrConnectWithoutFishingTripsInput[]
    upsert?: CrewMemberUpsertWithWhereUniqueWithoutFishingTripsInput | CrewMemberUpsertWithWhereUniqueWithoutFishingTripsInput[]
    set?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    disconnect?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    delete?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    connect?: CrewMemberWhereUniqueInput | CrewMemberWhereUniqueInput[]
    update?: CrewMemberUpdateWithWhereUniqueWithoutFishingTripsInput | CrewMemberUpdateWithWhereUniqueWithoutFishingTripsInput[]
    updateMany?: CrewMemberUpdateManyWithWhereWithoutFishingTripsInput | CrewMemberUpdateManyWithWhereWithoutFishingTripsInput[]
    deleteMany?: CrewMemberScalarWhereInput | CrewMemberScalarWhereInput[]
  }

  export type BankVisitUncheckedUpdateManyWithoutFishingTripNestedInput = {
    create?: XOR<BankVisitCreateWithoutFishingTripInput, BankVisitUncheckedCreateWithoutFishingTripInput> | BankVisitCreateWithoutFishingTripInput[] | BankVisitUncheckedCreateWithoutFishingTripInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingTripInput | BankVisitCreateOrConnectWithoutFishingTripInput[]
    upsert?: BankVisitUpsertWithWhereUniqueWithoutFishingTripInput | BankVisitUpsertWithWhereUniqueWithoutFishingTripInput[]
    createMany?: BankVisitCreateManyFishingTripInputEnvelope
    set?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    disconnect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    delete?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    update?: BankVisitUpdateWithWhereUniqueWithoutFishingTripInput | BankVisitUpdateWithWhereUniqueWithoutFishingTripInput[]
    updateMany?: BankVisitUpdateManyWithWhereWithoutFishingTripInput | BankVisitUpdateManyWithWhereWithoutFishingTripInput[]
    deleteMany?: BankVisitScalarWhereInput | BankVisitScalarWhereInput[]
  }

  export type BankVisitCreateNestedManyWithoutFishingBankInput = {
    create?: XOR<BankVisitCreateWithoutFishingBankInput, BankVisitUncheckedCreateWithoutFishingBankInput> | BankVisitCreateWithoutFishingBankInput[] | BankVisitUncheckedCreateWithoutFishingBankInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingBankInput | BankVisitCreateOrConnectWithoutFishingBankInput[]
    createMany?: BankVisitCreateManyFishingBankInputEnvelope
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
  }

  export type BankVisitUncheckedCreateNestedManyWithoutFishingBankInput = {
    create?: XOR<BankVisitCreateWithoutFishingBankInput, BankVisitUncheckedCreateWithoutFishingBankInput> | BankVisitCreateWithoutFishingBankInput[] | BankVisitUncheckedCreateWithoutFishingBankInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingBankInput | BankVisitCreateOrConnectWithoutFishingBankInput[]
    createMany?: BankVisitCreateManyFishingBankInputEnvelope
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BankVisitUpdateManyWithoutFishingBankNestedInput = {
    create?: XOR<BankVisitCreateWithoutFishingBankInput, BankVisitUncheckedCreateWithoutFishingBankInput> | BankVisitCreateWithoutFishingBankInput[] | BankVisitUncheckedCreateWithoutFishingBankInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingBankInput | BankVisitCreateOrConnectWithoutFishingBankInput[]
    upsert?: BankVisitUpsertWithWhereUniqueWithoutFishingBankInput | BankVisitUpsertWithWhereUniqueWithoutFishingBankInput[]
    createMany?: BankVisitCreateManyFishingBankInputEnvelope
    set?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    disconnect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    delete?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    update?: BankVisitUpdateWithWhereUniqueWithoutFishingBankInput | BankVisitUpdateWithWhereUniqueWithoutFishingBankInput[]
    updateMany?: BankVisitUpdateManyWithWhereWithoutFishingBankInput | BankVisitUpdateManyWithWhereWithoutFishingBankInput[]
    deleteMany?: BankVisitScalarWhereInput | BankVisitScalarWhereInput[]
  }

  export type BankVisitUncheckedUpdateManyWithoutFishingBankNestedInput = {
    create?: XOR<BankVisitCreateWithoutFishingBankInput, BankVisitUncheckedCreateWithoutFishingBankInput> | BankVisitCreateWithoutFishingBankInput[] | BankVisitUncheckedCreateWithoutFishingBankInput[]
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishingBankInput | BankVisitCreateOrConnectWithoutFishingBankInput[]
    upsert?: BankVisitUpsertWithWhereUniqueWithoutFishingBankInput | BankVisitUpsertWithWhereUniqueWithoutFishingBankInput[]
    createMany?: BankVisitCreateManyFishingBankInputEnvelope
    set?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    disconnect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    delete?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    connect?: BankVisitWhereUniqueInput | BankVisitWhereUniqueInput[]
    update?: BankVisitUpdateWithWhereUniqueWithoutFishingBankInput | BankVisitUpdateWithWhereUniqueWithoutFishingBankInput[]
    updateMany?: BankVisitUpdateManyWithWhereWithoutFishingBankInput | BankVisitUpdateManyWithWhereWithoutFishingBankInput[]
    deleteMany?: BankVisitScalarWhereInput | BankVisitScalarWhereInput[]
  }

  export type FishingTripCreateNestedOneWithoutBankVisitsInput = {
    create?: XOR<FishingTripCreateWithoutBankVisitsInput, FishingTripUncheckedCreateWithoutBankVisitsInput>
    connectOrCreate?: FishingTripCreateOrConnectWithoutBankVisitsInput
    connect?: FishingTripWhereUniqueInput
  }

  export type FishingBankCreateNestedOneWithoutBankVisitsInput = {
    create?: XOR<FishingBankCreateWithoutBankVisitsInput, FishingBankUncheckedCreateWithoutBankVisitsInput>
    connectOrCreate?: FishingBankCreateOrConnectWithoutBankVisitsInput
    connect?: FishingBankWhereUniqueInput
  }

  export type FishCatchCreateNestedManyWithoutBankVisitInput = {
    create?: XOR<FishCatchCreateWithoutBankVisitInput, FishCatchUncheckedCreateWithoutBankVisitInput> | FishCatchCreateWithoutBankVisitInput[] | FishCatchUncheckedCreateWithoutBankVisitInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutBankVisitInput | FishCatchCreateOrConnectWithoutBankVisitInput[]
    createMany?: FishCatchCreateManyBankVisitInputEnvelope
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
  }

  export type FishCatchUncheckedCreateNestedManyWithoutBankVisitInput = {
    create?: XOR<FishCatchCreateWithoutBankVisitInput, FishCatchUncheckedCreateWithoutBankVisitInput> | FishCatchCreateWithoutBankVisitInput[] | FishCatchUncheckedCreateWithoutBankVisitInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutBankVisitInput | FishCatchCreateOrConnectWithoutBankVisitInput[]
    createMany?: FishCatchCreateManyBankVisitInputEnvelope
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
  }

  export type FishingTripUpdateOneRequiredWithoutBankVisitsNestedInput = {
    create?: XOR<FishingTripCreateWithoutBankVisitsInput, FishingTripUncheckedCreateWithoutBankVisitsInput>
    connectOrCreate?: FishingTripCreateOrConnectWithoutBankVisitsInput
    upsert?: FishingTripUpsertWithoutBankVisitsInput
    connect?: FishingTripWhereUniqueInput
    update?: XOR<XOR<FishingTripUpdateToOneWithWhereWithoutBankVisitsInput, FishingTripUpdateWithoutBankVisitsInput>, FishingTripUncheckedUpdateWithoutBankVisitsInput>
  }

  export type FishingBankUpdateOneRequiredWithoutBankVisitsNestedInput = {
    create?: XOR<FishingBankCreateWithoutBankVisitsInput, FishingBankUncheckedCreateWithoutBankVisitsInput>
    connectOrCreate?: FishingBankCreateOrConnectWithoutBankVisitsInput
    upsert?: FishingBankUpsertWithoutBankVisitsInput
    connect?: FishingBankWhereUniqueInput
    update?: XOR<XOR<FishingBankUpdateToOneWithWhereWithoutBankVisitsInput, FishingBankUpdateWithoutBankVisitsInput>, FishingBankUncheckedUpdateWithoutBankVisitsInput>
  }

  export type FishCatchUpdateManyWithoutBankVisitNestedInput = {
    create?: XOR<FishCatchCreateWithoutBankVisitInput, FishCatchUncheckedCreateWithoutBankVisitInput> | FishCatchCreateWithoutBankVisitInput[] | FishCatchUncheckedCreateWithoutBankVisitInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutBankVisitInput | FishCatchCreateOrConnectWithoutBankVisitInput[]
    upsert?: FishCatchUpsertWithWhereUniqueWithoutBankVisitInput | FishCatchUpsertWithWhereUniqueWithoutBankVisitInput[]
    createMany?: FishCatchCreateManyBankVisitInputEnvelope
    set?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    disconnect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    delete?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    update?: FishCatchUpdateWithWhereUniqueWithoutBankVisitInput | FishCatchUpdateWithWhereUniqueWithoutBankVisitInput[]
    updateMany?: FishCatchUpdateManyWithWhereWithoutBankVisitInput | FishCatchUpdateManyWithWhereWithoutBankVisitInput[]
    deleteMany?: FishCatchScalarWhereInput | FishCatchScalarWhereInput[]
  }

  export type FishCatchUncheckedUpdateManyWithoutBankVisitNestedInput = {
    create?: XOR<FishCatchCreateWithoutBankVisitInput, FishCatchUncheckedCreateWithoutBankVisitInput> | FishCatchCreateWithoutBankVisitInput[] | FishCatchUncheckedCreateWithoutBankVisitInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutBankVisitInput | FishCatchCreateOrConnectWithoutBankVisitInput[]
    upsert?: FishCatchUpsertWithWhereUniqueWithoutBankVisitInput | FishCatchUpsertWithWhereUniqueWithoutBankVisitInput[]
    createMany?: FishCatchCreateManyBankVisitInputEnvelope
    set?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    disconnect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    delete?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    update?: FishCatchUpdateWithWhereUniqueWithoutBankVisitInput | FishCatchUpdateWithWhereUniqueWithoutBankVisitInput[]
    updateMany?: FishCatchUpdateManyWithWhereWithoutBankVisitInput | FishCatchUpdateManyWithWhereWithoutBankVisitInput[]
    deleteMany?: FishCatchScalarWhereInput | FishCatchScalarWhereInput[]
  }

  export type FishCatchCreateNestedManyWithoutFishTypeInput = {
    create?: XOR<FishCatchCreateWithoutFishTypeInput, FishCatchUncheckedCreateWithoutFishTypeInput> | FishCatchCreateWithoutFishTypeInput[] | FishCatchUncheckedCreateWithoutFishTypeInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutFishTypeInput | FishCatchCreateOrConnectWithoutFishTypeInput[]
    createMany?: FishCatchCreateManyFishTypeInputEnvelope
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
  }

  export type FishCatchUncheckedCreateNestedManyWithoutFishTypeInput = {
    create?: XOR<FishCatchCreateWithoutFishTypeInput, FishCatchUncheckedCreateWithoutFishTypeInput> | FishCatchCreateWithoutFishTypeInput[] | FishCatchUncheckedCreateWithoutFishTypeInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutFishTypeInput | FishCatchCreateOrConnectWithoutFishTypeInput[]
    createMany?: FishCatchCreateManyFishTypeInputEnvelope
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
  }

  export type FishCatchUpdateManyWithoutFishTypeNestedInput = {
    create?: XOR<FishCatchCreateWithoutFishTypeInput, FishCatchUncheckedCreateWithoutFishTypeInput> | FishCatchCreateWithoutFishTypeInput[] | FishCatchUncheckedCreateWithoutFishTypeInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutFishTypeInput | FishCatchCreateOrConnectWithoutFishTypeInput[]
    upsert?: FishCatchUpsertWithWhereUniqueWithoutFishTypeInput | FishCatchUpsertWithWhereUniqueWithoutFishTypeInput[]
    createMany?: FishCatchCreateManyFishTypeInputEnvelope
    set?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    disconnect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    delete?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    update?: FishCatchUpdateWithWhereUniqueWithoutFishTypeInput | FishCatchUpdateWithWhereUniqueWithoutFishTypeInput[]
    updateMany?: FishCatchUpdateManyWithWhereWithoutFishTypeInput | FishCatchUpdateManyWithWhereWithoutFishTypeInput[]
    deleteMany?: FishCatchScalarWhereInput | FishCatchScalarWhereInput[]
  }

  export type FishCatchUncheckedUpdateManyWithoutFishTypeNestedInput = {
    create?: XOR<FishCatchCreateWithoutFishTypeInput, FishCatchUncheckedCreateWithoutFishTypeInput> | FishCatchCreateWithoutFishTypeInput[] | FishCatchUncheckedCreateWithoutFishTypeInput[]
    connectOrCreate?: FishCatchCreateOrConnectWithoutFishTypeInput | FishCatchCreateOrConnectWithoutFishTypeInput[]
    upsert?: FishCatchUpsertWithWhereUniqueWithoutFishTypeInput | FishCatchUpsertWithWhereUniqueWithoutFishTypeInput[]
    createMany?: FishCatchCreateManyFishTypeInputEnvelope
    set?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    disconnect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    delete?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    connect?: FishCatchWhereUniqueInput | FishCatchWhereUniqueInput[]
    update?: FishCatchUpdateWithWhereUniqueWithoutFishTypeInput | FishCatchUpdateWithWhereUniqueWithoutFishTypeInput[]
    updateMany?: FishCatchUpdateManyWithWhereWithoutFishTypeInput | FishCatchUpdateManyWithWhereWithoutFishTypeInput[]
    deleteMany?: FishCatchScalarWhereInput | FishCatchScalarWhereInput[]
  }

  export type BankVisitCreateNestedOneWithoutFishCatchesInput = {
    create?: XOR<BankVisitCreateWithoutFishCatchesInput, BankVisitUncheckedCreateWithoutFishCatchesInput>
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishCatchesInput
    connect?: BankVisitWhereUniqueInput
  }

  export type FishTypeCreateNestedOneWithoutFishCatchesInput = {
    create?: XOR<FishTypeCreateWithoutFishCatchesInput, FishTypeUncheckedCreateWithoutFishCatchesInput>
    connectOrCreate?: FishTypeCreateOrConnectWithoutFishCatchesInput
    connect?: FishTypeWhereUniqueInput
  }

  export type BankVisitUpdateOneRequiredWithoutFishCatchesNestedInput = {
    create?: XOR<BankVisitCreateWithoutFishCatchesInput, BankVisitUncheckedCreateWithoutFishCatchesInput>
    connectOrCreate?: BankVisitCreateOrConnectWithoutFishCatchesInput
    upsert?: BankVisitUpsertWithoutFishCatchesInput
    connect?: BankVisitWhereUniqueInput
    update?: XOR<XOR<BankVisitUpdateToOneWithWhereWithoutFishCatchesInput, BankVisitUpdateWithoutFishCatchesInput>, BankVisitUncheckedUpdateWithoutFishCatchesInput>
  }

  export type FishTypeUpdateOneRequiredWithoutFishCatchesNestedInput = {
    create?: XOR<FishTypeCreateWithoutFishCatchesInput, FishTypeUncheckedCreateWithoutFishCatchesInput>
    connectOrCreate?: FishTypeCreateOrConnectWithoutFishCatchesInput
    upsert?: FishTypeUpsertWithoutFishCatchesInput
    connect?: FishTypeWhereUniqueInput
    update?: XOR<XOR<FishTypeUpdateToOneWithWhereWithoutFishCatchesInput, FishTypeUpdateWithoutFishCatchesInput>, FishTypeUncheckedUpdateWithoutFishCatchesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FishingTripCreateWithoutBoatInput = {
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    crewMembers?: CrewMemberCreateNestedManyWithoutFishingTripsInput
    bankVisits?: BankVisitCreateNestedManyWithoutFishingTripInput
  }

  export type FishingTripUncheckedCreateWithoutBoatInput = {
    id?: number
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    crewMembers?: CrewMemberUncheckedCreateNestedManyWithoutFishingTripsInput
    bankVisits?: BankVisitUncheckedCreateNestedManyWithoutFishingTripInput
  }

  export type FishingTripCreateOrConnectWithoutBoatInput = {
    where: FishingTripWhereUniqueInput
    create: XOR<FishingTripCreateWithoutBoatInput, FishingTripUncheckedCreateWithoutBoatInput>
  }

  export type FishingTripCreateManyBoatInputEnvelope = {
    data: FishingTripCreateManyBoatInput | FishingTripCreateManyBoatInput[]
    skipDuplicates?: boolean
  }

  export type FishingTripUpsertWithWhereUniqueWithoutBoatInput = {
    where: FishingTripWhereUniqueInput
    update: XOR<FishingTripUpdateWithoutBoatInput, FishingTripUncheckedUpdateWithoutBoatInput>
    create: XOR<FishingTripCreateWithoutBoatInput, FishingTripUncheckedCreateWithoutBoatInput>
  }

  export type FishingTripUpdateWithWhereUniqueWithoutBoatInput = {
    where: FishingTripWhereUniqueInput
    data: XOR<FishingTripUpdateWithoutBoatInput, FishingTripUncheckedUpdateWithoutBoatInput>
  }

  export type FishingTripUpdateManyWithWhereWithoutBoatInput = {
    where: FishingTripScalarWhereInput
    data: XOR<FishingTripUpdateManyMutationInput, FishingTripUncheckedUpdateManyWithoutBoatInput>
  }

  export type FishingTripScalarWhereInput = {
    AND?: FishingTripScalarWhereInput | FishingTripScalarWhereInput[]
    OR?: FishingTripScalarWhereInput[]
    NOT?: FishingTripScalarWhereInput | FishingTripScalarWhereInput[]
    id?: IntFilter<"FishingTrip"> | number
    boatId?: IntFilter<"FishingTrip"> | number
    departureDate?: DateTimeFilter<"FishingTrip"> | Date | string
    returnDate?: DateTimeFilter<"FishingTrip"> | Date | string
    createdAt?: DateTimeFilter<"FishingTrip"> | Date | string
    updatedAt?: DateTimeFilter<"FishingTrip"> | Date | string
  }

  export type FishingTripCreateWithoutCrewMembersInput = {
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    boat: BoatCreateNestedOneWithoutFishingTripsInput
    bankVisits?: BankVisitCreateNestedManyWithoutFishingTripInput
  }

  export type FishingTripUncheckedCreateWithoutCrewMembersInput = {
    id?: number
    boatId: number
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    bankVisits?: BankVisitUncheckedCreateNestedManyWithoutFishingTripInput
  }

  export type FishingTripCreateOrConnectWithoutCrewMembersInput = {
    where: FishingTripWhereUniqueInput
    create: XOR<FishingTripCreateWithoutCrewMembersInput, FishingTripUncheckedCreateWithoutCrewMembersInput>
  }

  export type FishingTripUpsertWithWhereUniqueWithoutCrewMembersInput = {
    where: FishingTripWhereUniqueInput
    update: XOR<FishingTripUpdateWithoutCrewMembersInput, FishingTripUncheckedUpdateWithoutCrewMembersInput>
    create: XOR<FishingTripCreateWithoutCrewMembersInput, FishingTripUncheckedCreateWithoutCrewMembersInput>
  }

  export type FishingTripUpdateWithWhereUniqueWithoutCrewMembersInput = {
    where: FishingTripWhereUniqueInput
    data: XOR<FishingTripUpdateWithoutCrewMembersInput, FishingTripUncheckedUpdateWithoutCrewMembersInput>
  }

  export type FishingTripUpdateManyWithWhereWithoutCrewMembersInput = {
    where: FishingTripScalarWhereInput
    data: XOR<FishingTripUpdateManyMutationInput, FishingTripUncheckedUpdateManyWithoutCrewMembersInput>
  }

  export type BoatCreateWithoutFishingTripsInput = {
    name: string
    type: string
    displacement: number
    buildDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoatUncheckedCreateWithoutFishingTripsInput = {
    id?: number
    name: string
    type: string
    displacement: number
    buildDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoatCreateOrConnectWithoutFishingTripsInput = {
    where: BoatWhereUniqueInput
    create: XOR<BoatCreateWithoutFishingTripsInput, BoatUncheckedCreateWithoutFishingTripsInput>
  }

  export type CrewMemberCreateWithoutFishingTripsInput = {
    name: string
    address: string
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CrewMemberUncheckedCreateWithoutFishingTripsInput = {
    id?: number
    name: string
    address: string
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CrewMemberCreateOrConnectWithoutFishingTripsInput = {
    where: CrewMemberWhereUniqueInput
    create: XOR<CrewMemberCreateWithoutFishingTripsInput, CrewMemberUncheckedCreateWithoutFishingTripsInput>
  }

  export type BankVisitCreateWithoutFishingTripInput = {
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingBank: FishingBankCreateNestedOneWithoutBankVisitsInput
    fishCatches?: FishCatchCreateNestedManyWithoutBankVisitInput
  }

  export type BankVisitUncheckedCreateWithoutFishingTripInput = {
    id?: number
    fishingBankId: number
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishCatches?: FishCatchUncheckedCreateNestedManyWithoutBankVisitInput
  }

  export type BankVisitCreateOrConnectWithoutFishingTripInput = {
    where: BankVisitWhereUniqueInput
    create: XOR<BankVisitCreateWithoutFishingTripInput, BankVisitUncheckedCreateWithoutFishingTripInput>
  }

  export type BankVisitCreateManyFishingTripInputEnvelope = {
    data: BankVisitCreateManyFishingTripInput | BankVisitCreateManyFishingTripInput[]
    skipDuplicates?: boolean
  }

  export type BoatUpsertWithoutFishingTripsInput = {
    update: XOR<BoatUpdateWithoutFishingTripsInput, BoatUncheckedUpdateWithoutFishingTripsInput>
    create: XOR<BoatCreateWithoutFishingTripsInput, BoatUncheckedCreateWithoutFishingTripsInput>
    where?: BoatWhereInput
  }

  export type BoatUpdateToOneWithWhereWithoutFishingTripsInput = {
    where?: BoatWhereInput
    data: XOR<BoatUpdateWithoutFishingTripsInput, BoatUncheckedUpdateWithoutFishingTripsInput>
  }

  export type BoatUpdateWithoutFishingTripsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displacement?: FloatFieldUpdateOperationsInput | number
    buildDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoatUncheckedUpdateWithoutFishingTripsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    displacement?: FloatFieldUpdateOperationsInput | number
    buildDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrewMemberUpsertWithWhereUniqueWithoutFishingTripsInput = {
    where: CrewMemberWhereUniqueInput
    update: XOR<CrewMemberUpdateWithoutFishingTripsInput, CrewMemberUncheckedUpdateWithoutFishingTripsInput>
    create: XOR<CrewMemberCreateWithoutFishingTripsInput, CrewMemberUncheckedCreateWithoutFishingTripsInput>
  }

  export type CrewMemberUpdateWithWhereUniqueWithoutFishingTripsInput = {
    where: CrewMemberWhereUniqueInput
    data: XOR<CrewMemberUpdateWithoutFishingTripsInput, CrewMemberUncheckedUpdateWithoutFishingTripsInput>
  }

  export type CrewMemberUpdateManyWithWhereWithoutFishingTripsInput = {
    where: CrewMemberScalarWhereInput
    data: XOR<CrewMemberUpdateManyMutationInput, CrewMemberUncheckedUpdateManyWithoutFishingTripsInput>
  }

  export type CrewMemberScalarWhereInput = {
    AND?: CrewMemberScalarWhereInput | CrewMemberScalarWhereInput[]
    OR?: CrewMemberScalarWhereInput[]
    NOT?: CrewMemberScalarWhereInput | CrewMemberScalarWhereInput[]
    id?: IntFilter<"CrewMember"> | number
    name?: StringFilter<"CrewMember"> | string
    address?: StringFilter<"CrewMember"> | string
    position?: StringFilter<"CrewMember"> | string
    createdAt?: DateTimeFilter<"CrewMember"> | Date | string
    updatedAt?: DateTimeFilter<"CrewMember"> | Date | string
  }

  export type BankVisitUpsertWithWhereUniqueWithoutFishingTripInput = {
    where: BankVisitWhereUniqueInput
    update: XOR<BankVisitUpdateWithoutFishingTripInput, BankVisitUncheckedUpdateWithoutFishingTripInput>
    create: XOR<BankVisitCreateWithoutFishingTripInput, BankVisitUncheckedCreateWithoutFishingTripInput>
  }

  export type BankVisitUpdateWithWhereUniqueWithoutFishingTripInput = {
    where: BankVisitWhereUniqueInput
    data: XOR<BankVisitUpdateWithoutFishingTripInput, BankVisitUncheckedUpdateWithoutFishingTripInput>
  }

  export type BankVisitUpdateManyWithWhereWithoutFishingTripInput = {
    where: BankVisitScalarWhereInput
    data: XOR<BankVisitUpdateManyMutationInput, BankVisitUncheckedUpdateManyWithoutFishingTripInput>
  }

  export type BankVisitScalarWhereInput = {
    AND?: BankVisitScalarWhereInput | BankVisitScalarWhereInput[]
    OR?: BankVisitScalarWhereInput[]
    NOT?: BankVisitScalarWhereInput | BankVisitScalarWhereInput[]
    id?: IntFilter<"BankVisit"> | number
    fishingTripId?: IntFilter<"BankVisit"> | number
    fishingBankId?: IntFilter<"BankVisit"> | number
    arrivalDate?: DateTimeFilter<"BankVisit"> | Date | string
    departureDate?: DateTimeFilter<"BankVisit"> | Date | string
    createdAt?: DateTimeFilter<"BankVisit"> | Date | string
    updatedAt?: DateTimeFilter<"BankVisit"> | Date | string
  }

  export type BankVisitCreateWithoutFishingBankInput = {
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingTrip: FishingTripCreateNestedOneWithoutBankVisitsInput
    fishCatches?: FishCatchCreateNestedManyWithoutBankVisitInput
  }

  export type BankVisitUncheckedCreateWithoutFishingBankInput = {
    id?: number
    fishingTripId: number
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishCatches?: FishCatchUncheckedCreateNestedManyWithoutBankVisitInput
  }

  export type BankVisitCreateOrConnectWithoutFishingBankInput = {
    where: BankVisitWhereUniqueInput
    create: XOR<BankVisitCreateWithoutFishingBankInput, BankVisitUncheckedCreateWithoutFishingBankInput>
  }

  export type BankVisitCreateManyFishingBankInputEnvelope = {
    data: BankVisitCreateManyFishingBankInput | BankVisitCreateManyFishingBankInput[]
    skipDuplicates?: boolean
  }

  export type BankVisitUpsertWithWhereUniqueWithoutFishingBankInput = {
    where: BankVisitWhereUniqueInput
    update: XOR<BankVisitUpdateWithoutFishingBankInput, BankVisitUncheckedUpdateWithoutFishingBankInput>
    create: XOR<BankVisitCreateWithoutFishingBankInput, BankVisitUncheckedCreateWithoutFishingBankInput>
  }

  export type BankVisitUpdateWithWhereUniqueWithoutFishingBankInput = {
    where: BankVisitWhereUniqueInput
    data: XOR<BankVisitUpdateWithoutFishingBankInput, BankVisitUncheckedUpdateWithoutFishingBankInput>
  }

  export type BankVisitUpdateManyWithWhereWithoutFishingBankInput = {
    where: BankVisitScalarWhereInput
    data: XOR<BankVisitUpdateManyMutationInput, BankVisitUncheckedUpdateManyWithoutFishingBankInput>
  }

  export type FishingTripCreateWithoutBankVisitsInput = {
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    boat: BoatCreateNestedOneWithoutFishingTripsInput
    crewMembers?: CrewMemberCreateNestedManyWithoutFishingTripsInput
  }

  export type FishingTripUncheckedCreateWithoutBankVisitsInput = {
    id?: number
    boatId: number
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    crewMembers?: CrewMemberUncheckedCreateNestedManyWithoutFishingTripsInput
  }

  export type FishingTripCreateOrConnectWithoutBankVisitsInput = {
    where: FishingTripWhereUniqueInput
    create: XOR<FishingTripCreateWithoutBankVisitsInput, FishingTripUncheckedCreateWithoutBankVisitsInput>
  }

  export type FishingBankCreateWithoutBankVisitsInput = {
    name: string
    location: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishingBankUncheckedCreateWithoutBankVisitsInput = {
    id?: number
    name: string
    location: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishingBankCreateOrConnectWithoutBankVisitsInput = {
    where: FishingBankWhereUniqueInput
    create: XOR<FishingBankCreateWithoutBankVisitsInput, FishingBankUncheckedCreateWithoutBankVisitsInput>
  }

  export type FishCatchCreateWithoutBankVisitInput = {
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishType: FishTypeCreateNestedOneWithoutFishCatchesInput
  }

  export type FishCatchUncheckedCreateWithoutBankVisitInput = {
    id?: number
    fishTypeId: number
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishCatchCreateOrConnectWithoutBankVisitInput = {
    where: FishCatchWhereUniqueInput
    create: XOR<FishCatchCreateWithoutBankVisitInput, FishCatchUncheckedCreateWithoutBankVisitInput>
  }

  export type FishCatchCreateManyBankVisitInputEnvelope = {
    data: FishCatchCreateManyBankVisitInput | FishCatchCreateManyBankVisitInput[]
    skipDuplicates?: boolean
  }

  export type FishingTripUpsertWithoutBankVisitsInput = {
    update: XOR<FishingTripUpdateWithoutBankVisitsInput, FishingTripUncheckedUpdateWithoutBankVisitsInput>
    create: XOR<FishingTripCreateWithoutBankVisitsInput, FishingTripUncheckedCreateWithoutBankVisitsInput>
    where?: FishingTripWhereInput
  }

  export type FishingTripUpdateToOneWithWhereWithoutBankVisitsInput = {
    where?: FishingTripWhereInput
    data: XOR<FishingTripUpdateWithoutBankVisitsInput, FishingTripUncheckedUpdateWithoutBankVisitsInput>
  }

  export type FishingTripUpdateWithoutBankVisitsInput = {
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boat?: BoatUpdateOneRequiredWithoutFishingTripsNestedInput
    crewMembers?: CrewMemberUpdateManyWithoutFishingTripsNestedInput
  }

  export type FishingTripUncheckedUpdateWithoutBankVisitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    boatId?: IntFieldUpdateOperationsInput | number
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crewMembers?: CrewMemberUncheckedUpdateManyWithoutFishingTripsNestedInput
  }

  export type FishingBankUpsertWithoutBankVisitsInput = {
    update: XOR<FishingBankUpdateWithoutBankVisitsInput, FishingBankUncheckedUpdateWithoutBankVisitsInput>
    create: XOR<FishingBankCreateWithoutBankVisitsInput, FishingBankUncheckedCreateWithoutBankVisitsInput>
    where?: FishingBankWhereInput
  }

  export type FishingBankUpdateToOneWithWhereWithoutBankVisitsInput = {
    where?: FishingBankWhereInput
    data: XOR<FishingBankUpdateWithoutBankVisitsInput, FishingBankUncheckedUpdateWithoutBankVisitsInput>
  }

  export type FishingBankUpdateWithoutBankVisitsInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishingBankUncheckedUpdateWithoutBankVisitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchUpsertWithWhereUniqueWithoutBankVisitInput = {
    where: FishCatchWhereUniqueInput
    update: XOR<FishCatchUpdateWithoutBankVisitInput, FishCatchUncheckedUpdateWithoutBankVisitInput>
    create: XOR<FishCatchCreateWithoutBankVisitInput, FishCatchUncheckedCreateWithoutBankVisitInput>
  }

  export type FishCatchUpdateWithWhereUniqueWithoutBankVisitInput = {
    where: FishCatchWhereUniqueInput
    data: XOR<FishCatchUpdateWithoutBankVisitInput, FishCatchUncheckedUpdateWithoutBankVisitInput>
  }

  export type FishCatchUpdateManyWithWhereWithoutBankVisitInput = {
    where: FishCatchScalarWhereInput
    data: XOR<FishCatchUpdateManyMutationInput, FishCatchUncheckedUpdateManyWithoutBankVisitInput>
  }

  export type FishCatchScalarWhereInput = {
    AND?: FishCatchScalarWhereInput | FishCatchScalarWhereInput[]
    OR?: FishCatchScalarWhereInput[]
    NOT?: FishCatchScalarWhereInput | FishCatchScalarWhereInput[]
    id?: IntFilter<"FishCatch"> | number
    bankVisitId?: IntFilter<"FishCatch"> | number
    fishTypeId?: IntFilter<"FishCatch"> | number
    weight?: FloatFilter<"FishCatch"> | number
    quality?: StringFilter<"FishCatch"> | string
    createdAt?: DateTimeFilter<"FishCatch"> | Date | string
    updatedAt?: DateTimeFilter<"FishCatch"> | Date | string
  }

  export type FishCatchCreateWithoutFishTypeInput = {
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bankVisit: BankVisitCreateNestedOneWithoutFishCatchesInput
  }

  export type FishCatchUncheckedCreateWithoutFishTypeInput = {
    id?: number
    bankVisitId: number
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishCatchCreateOrConnectWithoutFishTypeInput = {
    where: FishCatchWhereUniqueInput
    create: XOR<FishCatchCreateWithoutFishTypeInput, FishCatchUncheckedCreateWithoutFishTypeInput>
  }

  export type FishCatchCreateManyFishTypeInputEnvelope = {
    data: FishCatchCreateManyFishTypeInput | FishCatchCreateManyFishTypeInput[]
    skipDuplicates?: boolean
  }

  export type FishCatchUpsertWithWhereUniqueWithoutFishTypeInput = {
    where: FishCatchWhereUniqueInput
    update: XOR<FishCatchUpdateWithoutFishTypeInput, FishCatchUncheckedUpdateWithoutFishTypeInput>
    create: XOR<FishCatchCreateWithoutFishTypeInput, FishCatchUncheckedCreateWithoutFishTypeInput>
  }

  export type FishCatchUpdateWithWhereUniqueWithoutFishTypeInput = {
    where: FishCatchWhereUniqueInput
    data: XOR<FishCatchUpdateWithoutFishTypeInput, FishCatchUncheckedUpdateWithoutFishTypeInput>
  }

  export type FishCatchUpdateManyWithWhereWithoutFishTypeInput = {
    where: FishCatchScalarWhereInput
    data: XOR<FishCatchUpdateManyMutationInput, FishCatchUncheckedUpdateManyWithoutFishTypeInput>
  }

  export type BankVisitCreateWithoutFishCatchesInput = {
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    fishingTrip: FishingTripCreateNestedOneWithoutBankVisitsInput
    fishingBank: FishingBankCreateNestedOneWithoutBankVisitsInput
  }

  export type BankVisitUncheckedCreateWithoutFishCatchesInput = {
    id?: number
    fishingTripId: number
    fishingBankId: number
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankVisitCreateOrConnectWithoutFishCatchesInput = {
    where: BankVisitWhereUniqueInput
    create: XOR<BankVisitCreateWithoutFishCatchesInput, BankVisitUncheckedCreateWithoutFishCatchesInput>
  }

  export type FishTypeCreateWithoutFishCatchesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishTypeUncheckedCreateWithoutFishCatchesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishTypeCreateOrConnectWithoutFishCatchesInput = {
    where: FishTypeWhereUniqueInput
    create: XOR<FishTypeCreateWithoutFishCatchesInput, FishTypeUncheckedCreateWithoutFishCatchesInput>
  }

  export type BankVisitUpsertWithoutFishCatchesInput = {
    update: XOR<BankVisitUpdateWithoutFishCatchesInput, BankVisitUncheckedUpdateWithoutFishCatchesInput>
    create: XOR<BankVisitCreateWithoutFishCatchesInput, BankVisitUncheckedCreateWithoutFishCatchesInput>
    where?: BankVisitWhereInput
  }

  export type BankVisitUpdateToOneWithWhereWithoutFishCatchesInput = {
    where?: BankVisitWhereInput
    data: XOR<BankVisitUpdateWithoutFishCatchesInput, BankVisitUncheckedUpdateWithoutFishCatchesInput>
  }

  export type BankVisitUpdateWithoutFishCatchesInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingTrip?: FishingTripUpdateOneRequiredWithoutBankVisitsNestedInput
    fishingBank?: FishingBankUpdateOneRequiredWithoutBankVisitsNestedInput
  }

  export type BankVisitUncheckedUpdateWithoutFishCatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishingTripId?: IntFieldUpdateOperationsInput | number
    fishingBankId?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishTypeUpsertWithoutFishCatchesInput = {
    update: XOR<FishTypeUpdateWithoutFishCatchesInput, FishTypeUncheckedUpdateWithoutFishCatchesInput>
    create: XOR<FishTypeCreateWithoutFishCatchesInput, FishTypeUncheckedCreateWithoutFishCatchesInput>
    where?: FishTypeWhereInput
  }

  export type FishTypeUpdateToOneWithWhereWithoutFishCatchesInput = {
    where?: FishTypeWhereInput
    data: XOR<FishTypeUpdateWithoutFishCatchesInput, FishTypeUncheckedUpdateWithoutFishCatchesInput>
  }

  export type FishTypeUpdateWithoutFishCatchesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishTypeUncheckedUpdateWithoutFishCatchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishingTripCreateManyBoatInput = {
    id?: number
    departureDate: Date | string
    returnDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishingTripUpdateWithoutBoatInput = {
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crewMembers?: CrewMemberUpdateManyWithoutFishingTripsNestedInput
    bankVisits?: BankVisitUpdateManyWithoutFishingTripNestedInput
  }

  export type FishingTripUncheckedUpdateWithoutBoatInput = {
    id?: IntFieldUpdateOperationsInput | number
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    crewMembers?: CrewMemberUncheckedUpdateManyWithoutFishingTripsNestedInput
    bankVisits?: BankVisitUncheckedUpdateManyWithoutFishingTripNestedInput
  }

  export type FishingTripUncheckedUpdateManyWithoutBoatInput = {
    id?: IntFieldUpdateOperationsInput | number
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishingTripUpdateWithoutCrewMembersInput = {
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boat?: BoatUpdateOneRequiredWithoutFishingTripsNestedInput
    bankVisits?: BankVisitUpdateManyWithoutFishingTripNestedInput
  }

  export type FishingTripUncheckedUpdateWithoutCrewMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    boatId?: IntFieldUpdateOperationsInput | number
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankVisits?: BankVisitUncheckedUpdateManyWithoutFishingTripNestedInput
  }

  export type FishingTripUncheckedUpdateManyWithoutCrewMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    boatId?: IntFieldUpdateOperationsInput | number
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    returnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankVisitCreateManyFishingTripInput = {
    id?: number
    fishingBankId: number
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CrewMemberUpdateWithoutFishingTripsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrewMemberUncheckedUpdateWithoutFishingTripsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrewMemberUncheckedUpdateManyWithoutFishingTripsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankVisitUpdateWithoutFishingTripInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingBank?: FishingBankUpdateOneRequiredWithoutBankVisitsNestedInput
    fishCatches?: FishCatchUpdateManyWithoutBankVisitNestedInput
  }

  export type BankVisitUncheckedUpdateWithoutFishingTripInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishingBankId?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishCatches?: FishCatchUncheckedUpdateManyWithoutBankVisitNestedInput
  }

  export type BankVisitUncheckedUpdateManyWithoutFishingTripInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishingBankId?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankVisitCreateManyFishingBankInput = {
    id?: number
    fishingTripId: number
    arrivalDate: Date | string
    departureDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankVisitUpdateWithoutFishingBankInput = {
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishingTrip?: FishingTripUpdateOneRequiredWithoutBankVisitsNestedInput
    fishCatches?: FishCatchUpdateManyWithoutBankVisitNestedInput
  }

  export type BankVisitUncheckedUpdateWithoutFishingBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishingTripId?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishCatches?: FishCatchUncheckedUpdateManyWithoutBankVisitNestedInput
  }

  export type BankVisitUncheckedUpdateManyWithoutFishingBankInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishingTripId?: IntFieldUpdateOperationsInput | number
    arrivalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    departureDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchCreateManyBankVisitInput = {
    id?: number
    fishTypeId: number
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishCatchUpdateWithoutBankVisitInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fishType?: FishTypeUpdateOneRequiredWithoutFishCatchesNestedInput
  }

  export type FishCatchUncheckedUpdateWithoutBankVisitInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishTypeId?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchUncheckedUpdateManyWithoutBankVisitInput = {
    id?: IntFieldUpdateOperationsInput | number
    fishTypeId?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchCreateManyFishTypeInput = {
    id?: number
    bankVisitId: number
    weight: number
    quality: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FishCatchUpdateWithoutFishTypeInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankVisit?: BankVisitUpdateOneRequiredWithoutFishCatchesNestedInput
  }

  export type FishCatchUncheckedUpdateWithoutFishTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankVisitId?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FishCatchUncheckedUpdateManyWithoutFishTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    bankVisitId?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    quality?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BoatCountOutputTypeDefaultArgs instead
     */
    export type BoatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CrewMemberCountOutputTypeDefaultArgs instead
     */
    export type CrewMemberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CrewMemberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FishingTripCountOutputTypeDefaultArgs instead
     */
    export type FishingTripCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FishingTripCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FishingBankCountOutputTypeDefaultArgs instead
     */
    export type FishingBankCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FishingBankCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BankVisitCountOutputTypeDefaultArgs instead
     */
    export type BankVisitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BankVisitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FishTypeCountOutputTypeDefaultArgs instead
     */
    export type FishTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FishTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoatDefaultArgs instead
     */
    export type BoatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CrewMemberDefaultArgs instead
     */
    export type CrewMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CrewMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FishingTripDefaultArgs instead
     */
    export type FishingTripArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FishingTripDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FishingBankDefaultArgs instead
     */
    export type FishingBankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FishingBankDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BankVisitDefaultArgs instead
     */
    export type BankVisitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BankVisitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FishTypeDefaultArgs instead
     */
    export type FishTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FishTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FishCatchDefaultArgs instead
     */
    export type FishCatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FishCatchDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}